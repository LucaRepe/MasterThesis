
--- new func --- ___mingw_invalidParameterHandler
--- new bb ---

C3		RETN		0x1000

--- new func --- _pre_c_init
--- new bb ---

83 EC 1C		SUB     ESP, 1CH		0x1010
31 C0		XOR     EAX, EAX		0x1013
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x1015
C7 05 54 60 00 00 01 00 00 00		MOV     DS:_MINGW_INITLTSDROT_FORCE, 1		0x101e
C7 05 50 60 00 00 01 00 00 00		MOV     DS:_MINGW_INITLTSDYN_FORCE, 1		0x1028
C7 05 4C 60 00 00 01 00 00 00		MOV     DS:_MINGW_INITLTSSUO_FORCE, 1		0x1032
C7 05 44 60 00 00 01 00 00 00		MOV     DS:_MINGW_INITCHARMAX, 1		0x103c
75 18		JNZ     SHORT LOC_1060		0x1046
--- new bb ---

8B 15 3C 00 40 00		MOV     EDX, DS:40003CH		0x1048
81 BA 00 00 40 00 50 45 00 00		CMP     DWORD PTR [EDX+400000H], 4550H		0x104e
8D 8A 00 00 40 00		LEA     ECX, [EDX+400000H]		0x1058
74 60		JZ      SHORT LOC_10C0		0x105e
--- new bb ---

A3 0C 60 00 00		MOV     DS:_MANAGEDAPP, EAX		0x1060
A1 60 60 00 00		MOV     EAX, DS:_MINGW_APP_TYPE		0x1065
85 C0		TEST    EAX, EAX		0x106a
75 42		JNZ     SHORT LOC_10B0		0x106c
--- new bb ---

C7 04 24 01 00 00 00		MOV     [ESP+1CH+TYPE], 1; TYPE		0x106e
E8 22 15 00 00		CALL    ___SET_APP_TYPE		0x1075
--- new bb ---

E8 25 15 00 00		CALL    ___P__FMODE		0x107a
8B 15 74 60 00 00		MOV     EDX, DS:__FMODE		0x107f
89 10		MOV     [EAX], EDX		0x1085
E8 20 15 00 00		CALL    ___P__COMMODE		0x1087
8B 15 5C 60 00 00		MOV     EDX, DS:__COMMODE		0x108c
89 10		MOV     [EAX], EDX		0x1092
E8 37 06 00 00		CALL    __SETARGV		0x1094
83 3D 1C 30 00 00 01		CMP     __MINGW_INSTALL_DEBUG_MATHERR, 1		0x1099
74 4E		JZ      SHORT LOC_10F0		0x10a0
--- new bb ---

31 C0		XOR     EAX, EAX		0x10a2
83 C4 1C		ADD     ESP, 1CH		0x10a4
C3		RETN		0x10a7
--- new bb ---

C7 04 24 02 00 00 00		MOV     [ESP+1CH+TYPE], 2; TYPE		0x10b0
E8 E0 14 00 00		CALL    ___SET_APP_TYPE		0x10b7
EB BC		JMP     SHORT LOC_107A		0x10bc
--- new bb ---

0F B7 51 18		MOVZX   EDX, WORD PTR [ECX+18H]		0x10c0
66 81 FA 0B 01		CMP     DX, 10BH		0x10c4
74 3D		JZ      SHORT LOC_1108		0x10c9
--- new bb ---

66 81 FA 0B 02		CMP     DX, 20BH		0x10cb
75 8E		JNZ     SHORT LOC_1060		0x10d0
--- new bb ---

83 B9 84 00 00 00 0E		CMP     DWORD PTR [ECX+84H], 0EH		0x10d2
76 85		JBE     SHORT LOC_1060		0x10d9
--- new bb ---

8B 91 F8 00 00 00		MOV     EDX, [ECX+0F8H]		0x10db
31 C0		XOR     EAX, EAX		0x10e1
85 D2		TEST    EDX, EDX		0x10e3
0F 95 C0		SETNZ   AL		0x10e5
E9 73 FF FF FF		JMP     LOC_1060		0x10e8
--- new bb ---

C7 04 24 E0 17 00 00		MOV     [ESP+1CH+TYPE], OFFSET __MATHERR; F		0x10f0
E8 14 0C 00 00		CALL    ___MINGW_SETUSERMATHERR		0x10f7
31 C0		XOR     EAX, EAX		0x10fc
83 C4 1C		ADD     ESP, 1CH		0x10fe
C3		RETN		0x1101
--- new bb ---

83 79 74 0E		CMP     DWORD PTR [ECX+74H], 0EH		0x1108
0F 86 4E FF FF FF		JBE     LOC_1060		0x110c
--- new bb ---

8B 89 E8 00 00 00		MOV     ECX, [ECX+0E8H]		0x1112
31 C0		XOR     EAX, EAX		0x1118
85 C9		TEST    ECX, ECX		0x111a
0F 95 C0		SETNZ   AL		0x111c
E9 3C FF FF FF		JMP     LOC_1060		0x111f

--- new func --- _pre_cpp_init
--- new bb ---

83 EC 2C		SUB     ESP, 2CH		0x1130
A1 48 60 00 00		MOV     EAX, DS:__NEWMODE		0x1133
C7 44 24 10 04 60 00 00		MOV     [ESP+2CH+VAR_1C], OFFSET _STARTINFO		0x1138
A3 04 60 00 00		MOV     DS:_STARTINFO.NEWMODE, EAX		0x1140
A1 40 60 00 00		MOV     EAX, DS:__DOWILDCARD		0x1145
C7 44 24 08 14 60 00 00		MOV     [ESP+2CH+VAR_24], OFFSET _ENVP		0x114a
89 44 24 0C		MOV     [ESP+2CH+VAR_20], EAX		0x1152
C7 44 24 04 18 60 00 00		MOV     [ESP+2CH+VAR_28], OFFSET _ARGV		0x1156
C7 04 24 1C 60 00 00		MOV     [ESP+2CH+VAR_2C], OFFSET _ARGC		0x115e
E8 52 14 00 00		CALL    ___GETMAINARGS		0x1165
83 C4 2C		ADD     ESP, 2CH		0x116a
C3		RETN		0x116d

--- new func --- ___tmainCRTStartup
--- new bb ---

8D 4C 24 04		LEA     ECX, [ESP+ARG_0]		0x1170
83 E4 F0		AND     ESP, 0FFFFFFF0H		0x1174
31 C0		XOR     EAX, EAX		0x1177
FF 71 FC		PUSH    DWORD PTR [ECX-4]		0x1179
55		PUSH    EBP		0x117c
89 E5		MOV     EBP, ESP		0x117d
57		PUSH    EDI		0x117f
56		PUSH    ESI		0x1180
8D 55 A4		LEA     EDX, [EBP-5CH]		0x1181
53		PUSH    EBX		0x1184
89 D7		MOV     EDI, EDX		0x1185
51		PUSH    ECX		0x1187
B9 11 00 00 00		MOV     ECX, 11H		0x1188
83 EC 78		SUB     ESP, 78H		0x118d
8B 35 60 60 00 00		MOV     ESI, DS:_MINGW_APP_TYPE		0x1190
F3 AB		REP STOSD		0x1196
85 F6		TEST    ESI, ESI		0x1198
0F 85 A0 02 00 00		JNZ     LOC_1440		0x119a
--- new bb ---

64 A1 18 00 00 00		MOV     EAX, LARGE FS:18H		0x11a0
8B 35 14 71 00 00		MOV     ESI, DS:__IMP__SLEEP@4; SLEEP(X)		0x11a6
8B 78 04		MOV     EDI, [EAX+4]		0x11ac
31 DB		XOR     EBX, EBX		0x11af
EB 19		JMP     SHORT LOC_11CC		0x11b1
--- new bb ---

39 C7		CMP     FIBERID, LOCK_FREE		0x11b8
0F 84 18 02 00 00		JZ      LOC_13D8		0x11ba
--- new bb ---

C7 04 24 E8 03 00 00		MOV     [ESP+90H+DWMILLISECONDS], 3E8H; DWMILLISECONDS		0x11c0
FF D6		CALL    ESI ; SLEEP(X); SLEEP(X)		0x11c7
83 EC 04		SUB     ESP, 4		0x11c9
--- new bb ---

89 D8		MOV     EAX, EBX		0x11cc
F0 0F B1 3D BC 60 00 00		LOCK CMPXCHG DS:___NATIVE_STARTUP_LOCK, FIBERID		0x11ce
85 C0		TEST    LOCK_FREE, LOCK_FREE		0x11d6
75 DE		JNZ     SHORT LOC_11B8		0x11d8
--- new bb ---

A1 C0 60 00 00		MOV     LOCK_FREE, DS:___NATIVE_STARTUP_STATE		0x11da
31 DB		XOR     EBX, EBX		0x11df
83 F8 01		CMP     EAX, 1		0x11e1
0F 84 01 02 00 00		JZ      LOC_13EB		0x11e4
--- new bb ---

A1 C0 60 00 00		MOV     EAX, DS:___NATIVE_STARTUP_STATE		0x11ea
85 C0		TEST    EAX, EAX		0x11ef
0F 84 79 02 00 00		JZ      LOC_1470		0x11f1
--- new bb ---

C7 05 08 60 00 00 01 00 00 00		MOV     DS:_HAS_CCTOR, 1		0x11f7
--- new bb ---

A1 C0 60 00 00		MOV     EAX, DS:___NATIVE_STARTUP_STATE		0x1201
83 F8 01		CMP     EAX, 1		0x1206
0F 84 F6 01 00 00		JZ      LOC_1405		0x1209
--- new bb ---

85 DB		TEST    NESTED, NESTED		0x120f
0F 84 14 02 00 00		JZ      LOC_142B		0x1211
--- new bb ---

A1 50 40 00 00		MOV     EAX, DS:___DYN_TLS_INIT_CALLBACK		0x1217
85 C0		TEST    EAX, EAX		0x121c
74 1C		JZ      SHORT LOC_123C		0x121e
--- new bb ---

C7 44 24 08 00 00 00 00		MOV     [ESP+90H+LPRESERVED], 0; LPRESERVED		0x1220
C7 44 24 04 02 00 00 00		MOV     [ESP+90H+DWREASON], 2; DWREASON		0x1228
C7 04 24 00 00 00 00		MOV     [ESP+90H+DWMILLISECONDS], 0; HDLLHANDLE		0x1230
FF D0		CALL    EAX ; __DYN_TLS_INIT(X,X,X); __DYN_TLS_INIT(X,X,X)		0x1237
83 EC 0C		SUB     ESP, 0CH		0x1239
--- new bb ---

E8 EF 07 00 00		CALL    __PEI386_RUNTIME_RELOCATOR		0x123c
C7 04 24 20 1D 00 00		MOV     [ESP+90H+DWMILLISECONDS], OFFSET __GNU_EXCEPTION_HANDLER@4; LPTOPLEVELEXCEPTIONFILTER		0x1241
FF 15 10 71 00 00		CALL    DS:__IMP__SETUNHANDLEDEXCEPTIONFILTER@4; SETUNHANDLEDEXCEPTIONFILTER(X)		0x1248
83 EC 04		SUB     ESP, 4		0x124e
A3 78 60 00 00		MOV     DS:___MINGW_OLDEXCPT_HANDLER, EAX		0x1251
C7 04 24 00 10 00 00		MOV     [ESP+90H+DWMILLISECONDS], OFFSET ___MINGW_INVALIDPARAMETERHANDLER; NEW_HANDLER		0x1256
E8 8E 13 00 00		CALL    __SET_INVALID_PARAMETER_HANDLER		0x125d
E8 F9 05 00 00		CALL    _FPRESET		0x1262
C7 05 B8 60 00 00 00 00 40 00		MOV     DS:___MINGW_WINMAIN_HINSTANCE, 400000H		0x1267
E8 3E 13 00 00		CALL    ___P__ACMDLN		0x1271
31 C9		XOR     ECX, ECX		0x1276
8B 00		MOV     EAX, [EAX]		0x1278
85 C0		TEST    LPSZCOMMANDLINE, LPSZCOMMANDLINE		0x127a
75 13		JNZ     SHORT LOC_1291		0x127c
--- new bb ---

EB 4D		JMP     SHORT LOC_12CD		0x127e
--- new bb ---

84 D2		TEST    DL, DL		0x1280
74 44		JZ      SHORT LOC_12C8		0x1282
--- new bb ---

83 E1 01		AND     INDOUBLEQUOTE, 1		0x1284
74 27		JZ      SHORT LOC_12B0		0x1287
--- new bb ---

B9 01 00 00 00		MOV     ECX, 1		0x1289
--- new bb ---

83 C0 01		ADD     LPSZCOMMANDLINE, 1		0x128e
--- new bb ---

0F B6 10		MOVZX   EDX, BYTE PTR [LPSZCOMMANDLINE]		0x1291
80 FA 20		CMP     DL, 20H ; ' '		0x1294
7E E7		JLE     SHORT LOC_1280		0x1297
--- new bb ---

89 CB		MOV     EBX, INDOUBLEQUOTE		0x1299
83 F3 01		XOR     EBX, 1		0x129b
80 FA 22		CMP     DL, 22H ; '"'		0x129e
0F 44 CB		CMOVZ   INDOUBLEQUOTE, EBX		0x12a1
EB E8		JMP     SHORT LOC_128E		0x12a4
--- new bb ---

84 D2		TEST    DL, DL		0x12b0
74 14		JZ      SHORT LOC_12C8		0x12b2
--- new bb ---

8D 74 26 00		LEA     ESI, [ESI+0]		0x12b4
--- new bb ---

0F B6 50 01		MOVZX   EDX, BYTE PTR [LPSZCOMMANDLINE+1]		0x12b8
83 C0 01		ADD     LPSZCOMMANDLINE, 1		0x12bc
84 D2		TEST    DL, DL		0x12bf
74 05		JZ      SHORT LOC_12C8		0x12c1
--- new bb ---

80 FA 20		CMP     DL, 20H ; ' '		0x12c3
7E F0		JLE     SHORT LOC_12B8		0x12c6
--- new bb ---

A3 B4 60 00 00		MOV     DS:___MINGW_WINMAIN_LPCMDLINE, LPSZCOMMANDLINE		0x12c8
--- new bb ---

8B 1D 60 60 00 00		MOV     EBX, DS:_MINGW_APP_TYPE		0x12cd
85 DB		TEST    EBX, EBX		0x12d3
74 14		JZ      SHORT LOC_12EB		0x12d5
--- new bb ---

B8 0A 00 00 00		MOV     LPSZCOMMANDLINE, 0AH		0x12d7
F6 45 D0 01		TEST    BYTE PTR [EBP-30H], 1		0x12dc
0F 85 E2 00 00 00		JNZ     LOC_13C8		0x12e0
--- new bb ---

A3 00 30 00 00		MOV     ___MINGW_WINMAIN_NSHOWCMD, EAX		0x12e6
--- new bb ---

8B 1D 1C 60 00 00		MOV     EBX, DS:_ARGC		0x12eb
8D 34 9D 04 00 00 00		LEA     ESI, DS:4[EBX*4]		0x12f1
89 34 24		MOV     [ESP+90H+DWMILLISECONDS], ESI; SIZE		0x12f8
E8 3C 12 00 00		CALL    _MALLOC		0x12fb
8B 15 18 60 00 00		MOV     EDX, DS:_ARGV		0x1300
89 45 90		MOV     [EBP-70H], EAX		0x1306
85 DB		TEST    EBX, EBX		0x1309
0F 8E 82 01 00 00		JLE     LOC_1493		0x130b
--- new bb ---

89 C3		MOV     EBX, EAX		0x1311
8D 46 FC		LEA     EAX, [ESI-4]		0x1313
89 D7		MOV     FIBERID, EDX		0x1316
89 45 8C		MOV     [EBP-74H], EAX		0x1318
01 D0		ADD     EAX, EDX		0x131b
89 45 94		MOV     [EBP-6CH], EAX		0x131d
--- new bb ---

8B 07		MOV     EAX, [EDI]		0x1320
83 C3 04		ADD     EBX, 4		0x1322
83 C7 04		ADD     EDI, 4		0x1325
89 04 24		MOV     [ESP+90H+DWMILLISECONDS], EAX; STR		0x1328
E8 EC 11 00 00		CALL    _STRLEN		0x132b
8D 70 01		LEA     ESI, [EAX+1]		0x1330
89 34 24		MOV     [ESP+90H+DWMILLISECONDS], ESI; SIZE		0x1333
E8 01 12 00 00		CALL    _MALLOC		0x1336
89 43 FC		MOV     [EBX-4], EAX		0x133b
8B 4F FC		MOV     ECX, [EDI-4]		0x133e
89 74 24 08		MOV     [ESP+90H+LPRESERVED], ESI; SIZE		0x1341
89 4C 24 04		MOV     [ESP+90H+DWREASON], ECX; SRC		0x1345
89 04 24		MOV     [ESP+90H+DWMILLISECONDS], EAX; VOID *		0x1349
E8 E3 11 00 00		CALL    _MEMCPY		0x134c
39 7D 94		CMP     [EBP-6CH], EDI		0x1351
75 CA		JNZ     SHORT LOC_1320		0x1354
--- new bb ---

8B 45 8C		MOV     EAX, [EBP-74H]		0x1356
03 45 90		ADD     EAX, [EBP-70H]		0x1359
--- new bb ---

C7 00 00 00 00 00		MOV     DWORD PTR [EAX], 0		0x135c
8B 45 90		MOV     EAX, [EBP-70H]		0x1362
A3 18 60 00 00		MOV     DS:_ARGV, EAX		0x1365
E8 31 03 00 00		CALL    ___MAIN		0x136a
A1 14 60 00 00		MOV     EAX, DS:_ENVP		0x136f
8B 15 2C 71 00 00		MOV     EDX, DS:__IMP____INITENV		0x1374
89 02		MOV     [EDX], EAX		0x137a
89 44 24 08		MOV     [ESP+90H+LPRESERVED], EAX; ENVP		0x137c
A1 18 60 00 00		MOV     EAX, DS:_ARGV		0x1380
89 44 24 04		MOV     [ESP+90H+DWREASON], EAX; ARGV		0x1385
A1 1C 60 00 00		MOV     EAX, DS:_ARGC		0x1389
89 04 24		MOV     [ESP+90H+DWMILLISECONDS], EAX; ARGC		0x138e
E8 3A 02 00 00		CALL    _MAIN		0x1391
8B 0D 0C 60 00 00		MOV     ECX, DS:_MANAGEDAPP		0x1396
A3 10 60 00 00		MOV     DS:_MAINRET, EAX		0x139c
85 C9		TEST    ECX, ECX		0x13a1
0F 84 F2 00 00 00		JZ      LOC_149B		0x13a3
--- new bb ---

8B 15 08 60 00 00		MOV     EDX, DS:_HAS_CCTOR		0x13a9
85 D2		TEST    EDX, EDX		0x13af
0F 84 A1 00 00 00		JZ      LOC_1458		0x13b1
--- new bb ---

8D 65 F0		LEA     ESP, [EBP-10H]		0x13b7
59		POP     ECX		0x13ba
5B		POP     EBX		0x13bb
5E		POP     ESI		0x13bc
5F		POP     EDI		0x13bd
5D		POP     EBP		0x13be
8D 61 FC		LEA     ESP, [ECX-4]		0x13bf
C3		RETN		0x13c2
--- new bb ---

0F B7 45 D4		MOVZX   EAX, WORD PTR [EBP-2CH]		0x13c8
E9 15 FF FF FF		JMP     LOC_12E6		0x13cc
--- new bb ---

A1 C0 60 00 00		MOV     LOCK_FREE, DS:___NATIVE_STARTUP_STATE		0x13d8
BB 01 00 00 00		MOV     EBX, 1		0x13dd
83 F8 01		CMP     EAX, 1		0x13e2
0F 85 FF FD FF FF		JNZ     LOC_11EA		0x13e5
--- new bb ---

C7 04 24 1F 00 00 00		MOV     [ESP+90H+DWMILLISECONDS], 1FH		0x13eb
E8 95 11 00 00		CALL    __AMSG_EXIT		0x13f2
A1 C0 60 00 00		MOV     EAX, DS:___NATIVE_STARTUP_STATE		0x13f7
83 F8 01		CMP     EAX, 1		0x13fc
0F 85 0A FE FF FF		JNZ     LOC_120F		0x13ff
--- new bb ---

C7 44 24 04 08 80 00 00		MOV     [ESP+90H+DWREASON], OFFSET ___XC_Z; LAST		0x1405
C7 04 24 00 80 00 00		MOV     [ESP+90H+DWMILLISECONDS], OFFSET ___CRT_XC_START__; FIRST		0x140d
E8 63 11 00 00		CALL    __INITTERM		0x1414
C7 05 C0 60 00 00 02 00 00 00		MOV     DS:___NATIVE_STARTUP_STATE, 2		0x1419
85 DB		TEST    NESTED, NESTED		0x1423
0F 85 EC FD FF FF		JNZ     LOC_1217		0x1425
--- new bb ---

87 1D BC 60 00 00		XCHG    NESTED, DS:___NATIVE_STARTUP_LOCK		0x142b
E9 E1 FD FF FF		JMP     LOC_1217		0x1431
--- new bb ---

89 14 24		MOV     [ESP+90H+DWMILLISECONDS], EDX; LPSTARTUPINFO		0x1440
FF 15 00 71 00 00		CALL    DS:__IMP__GETSTARTUPINFOA@4; GETSTARTUPINFOA(X)		0x1443
83 EC 04		SUB     ESP, 4		0x1449
E9 4F FD FF FF		JMP     LOC_11A0		0x144c
--- new bb ---

E8 27 11 00 00		CALL    __CEXIT		0x1458
A1 10 60 00 00		MOV     EAX, DS:_MAINRET		0x145d
8D 65 F0		LEA     ESP, [EBP-10H]		0x1462
59		POP     ECX		0x1465
5B		POP     EBX		0x1466
5E		POP     ESI		0x1467
5F		POP     EDI		0x1468
5D		POP     EBP		0x1469
8D 61 FC		LEA     ESP, [ECX-4]		0x146a
C3		RETN		0x146d
--- new bb ---

C7 44 24 04 18 80 00 00		MOV     [ESP+90H+DWREASON], OFFSET ___XI_Z; LAST		0x1470
C7 04 24 0C 80 00 00		MOV     [ESP+90H+DWMILLISECONDS], OFFSET ___CRT_XC_END__; FIRST		0x1478
C7 05 C0 60 00 00 01 00 00 00		MOV     DS:___NATIVE_STARTUP_STATE, 1		0x147f
E8 EE 10 00 00		CALL    __INITTERM		0x1489
E9 6E FD FF FF		JMP     LOC_1201		0x148e
--- new bb ---

8B 45 90		MOV     EAX, [EBP-70H]		0x1493
E9 C1 FE FF FF		JMP     LOC_135C		0x1496
--- new bb ---

89 04 24		MOV     [ESP+90H+DWMILLISECONDS], EAX; CODE		0x149b
E8 B9 10 00 00		CALL    _EXIT		0x149e

--- new func --- _WinMainCRTStartup
--- new bb ---

C7 05 60 60 00 00 01 00 00 00		MOV     DS:_MINGW_APP_TYPE, 1		0x14b0
E9 B1 FC FF FF		JMP     ___TMAINCRTSTARTUP		0x14ba
--- new bb ---

8D 4C 24 04		LEA     ECX, [ESP+ARG_0]		0x1170

--- new func --- _mainCRTStartup
--- new bb ---

C7 05 60 60 00 00 00 00 00 00		MOV     DS:_MINGW_APP_TYPE, 0		0x14c0
E9 A1 FC FF FF		JMP     ___TMAINCRTSTARTUP		0x14ca
--- new bb ---

8D 4C 24 04		LEA     ECX, [ESP+ARG_0]		0x1170

--- new func --- _atexit
--- new bb ---

83 EC 1C		SUB     ESP, 1CH		0x14d0
8B 44 24 20		MOV     EAX, [ESP+1CH+FUNC]		0x14d3
89 04 24		MOV     [ESP+1CH+FUNC], EAX; FUNC		0x14d7
E8 95 10 00 00		CALL    __ONEXIT		0x14da
85 C0		TEST    EAX, EAX		0x14df
0F 94 C0		SETZ    AL		0x14e1
83 C4 1C		ADD     ESP, 1CH		0x14e4
0F B6 C0		MOVZX   EAX, AL		0x14e7
F7 D8		NEG     EAX		0x14ea
C3		RETN		0x14ec

--- new func --- ___gcc_register_frame
--- new bb ---

55		PUSH    EBP		0x14f0
89 E5		MOV     EBP, ESP		0x14f1
57		PUSH    EDI		0x14f3
56		PUSH    ESI		0x14f4
53		PUSH    EBX		0x14f5
83 EC 1C		SUB     ESP, 1CH		0x14f6
C7 04 24 00 40 00 00		MOV     DWORD PTR [ESP], OFFSET LIBFILENAME; "LIBGCC_S_DW2-1.DLL"		0x14f9
FF 15 F8 70 00 00		CALL    DS:__IMP__GETMODULEHANDLEA@4; GETMODULEHANDLEA(X)		0x1500
83 EC 04		SUB     ESP, 4		0x1506
85 C0		TEST    EAX, EAX		0x1509
74 73		JZ      SHORT LOC_1580		0x150b
--- new bb ---

89 C3		MOV     EBX, EAX		0x150d
C7 04 24 00 40 00 00		MOV     DWORD PTR [ESP], OFFSET LIBFILENAME; "LIBGCC_S_DW2-1.DLL"		0x150f
FF 15 0C 71 00 00		CALL    DS:__IMP__LOADLIBRARYA@4; LOADLIBRARYA(X)		0x1516
8B 3D FC 70 00 00		MOV     EDI, DS:__IMP__GETPROCADDRESS@8; GETPROCADDRESS(X,X)		0x151c
83 EC 04		SUB     ESP, 4		0x1522
A3 20 60 00 00		MOV     DS:_HMOD_LIBGCC, EAX		0x1525
C7 44 24 04 13 40 00 00		MOV     DWORD PTR [ESP+4], OFFSET PROCNAME; "__REGISTER_FRAME_INFO"		0x152a
89 1C 24		MOV     [ESP], EBX; HMODULE		0x1532
FF D7		CALL    EDI ; GETPROCADDRESS(X,X); GETPROCADDRESS(X,X)		0x1535
83 EC 08		SUB     ESP, 8		0x1537
89 C6		MOV     ESI, EAX		0x153a
C7 44 24 04 29 40 00 00		MOV     DWORD PTR [ESP+4], OFFSET ADEREGISTERFRAM; "__DEREGISTER_FRAME_INFO"		0x153c
89 1C 24		MOV     [ESP], EBX; HMODULE		0x1544
FF D7		CALL    EDI ; GETPROCADDRESS(X,X); GETPROCADDRESS(X,X)		0x1547
A3 04 30 00 00		MOV     _DEREGISTER_FRAME_FN, EAX		0x1549
83 EC 08		SUB     ESP, 8		0x154e
--- new bb ---

85 F6		TEST    ESI, ESI		0x1551
74 11		JZ      SHORT LOC_1566		0x1553
--- new bb ---

C7 44 24 04 24 60 00 00		MOV     DWORD PTR [ESP+4], OFFSET _OBJ		0x1555
C7 04 24 00 50 00 00		MOV     DWORD PTR [ESP], OFFSET ___EH_FRAME_BEGIN__		0x155d
FF D6		CALL    ESI		0x1564
--- new bb ---

C7 04 24 A0 15 00 00		MOV     DWORD PTR [ESP], OFFSET ___GCC_DEREGISTER_FRAME; FUNC		0x1566
E8 5E FF FF FF		CALL    _ATEXIT		0x156d
8D 65 F4		LEA     ESP, [EBP-0CH]		0x1572
5B		POP     EBX		0x1575
5E		POP     ESI		0x1576
5F		POP     EDI		0x1577
5D		POP     EBP		0x1578
C3		RETN		0x1579
--- new bb ---

C7 05 04 30 00 00 00 00 00 00		MOV     _DEREGISTER_FRAME_FN, 0		0x1580
BE 00 00 00 00		MOV     ESI, 0		0x158a
EB C0		JMP     SHORT LOC_1551		0x158f

--- new func --- ___gcc_deregister_frame
--- new bb ---

55		PUSH    EBP		0x15a0
89 E5		MOV     EBP, ESP		0x15a1
83 EC 18		SUB     ESP, 18H		0x15a3
A1 04 30 00 00		MOV     EAX, _DEREGISTER_FRAME_FN		0x15a6
85 C0		TEST    EAX, EAX		0x15ab
74 09		JZ      SHORT LOC_15B8		0x15ad
--- new bb ---

C7 04 24 00 50 00 00		MOV     DWORD PTR [ESP], OFFSET ___EH_FRAME_BEGIN__		0x15af
FF D0		CALL    EAX ; _DEREGISTER_FRAME_FN		0x15b6
--- new bb ---

A1 20 60 00 00		MOV     EAX, DS:_HMOD_LIBGCC		0x15b8
85 C0		TEST    EAX, EAX		0x15bd
74 0C		JZ      SHORT LOCRET_15CD		0x15bf
--- new bb ---

89 04 24		MOV     [ESP], EAX; HLIBMODULE		0x15c1
FF 15 F0 70 00 00		CALL    DS:__IMP__FREELIBRARY@4; FREELIBRARY(X)		0x15c4
83 EC 04		SUB     ESP, 4		0x15ca
--- new bb ---

C9		LEAVE		0x15cd
C3		RETN		0x15ce

--- new func --- _main
--- new bb ---

55		PUSH    EBP		0x15d0
89 E5		MOV     EBP, ESP		0x15d1
83 E4 F0		AND     ESP, 0FFFFFFF0H		0x15d3
83 EC 10		SUB     ESP, 10H		0x15d6
E8 C2 00 00 00		CALL    ___MAIN		0x15d9
C7 04 24 44 40 00 00		MOV     DWORD PTR [ESP], OFFSET BUFFER; "CIAO GHIDRA"		0x15de
E8 42 0F 00 00		CALL    _PUTS		0x15e5
B8 00 00 00 00		MOV     EAX, 0		0x15ea
C9		LEAVE		0x15ef
C3		RETN		0x15f0

--- new func --- ___do_global_dtors
--- new bb ---

A1 08 30 00 00		MOV     EAX, _P_62152		0x1600
8B 00		MOV     EAX, [EAX]		0x1605
85 C0		TEST    EAX, EAX		0x1607
74 25		JZ      SHORT LOCRET_1630		0x1609
--- new bb ---

83 EC 0C		SUB     ESP, 0CH		0x160b
66 90		XCHG    AX, AX		0x160e
--- new bb ---

FF D0		CALL    EAX		0x1610
A1 08 30 00 00		MOV     EAX, _P_62152		0x1612
8D 50 04		LEA     EDX, [EAX+4]		0x1617
8B 40 04		MOV     EAX, [EAX+4]		0x161a
89 15 08 30 00 00		MOV     _P_62152, EDX		0x161d
85 C0		TEST    EAX, EAX		0x1623
75 E9		JNZ     SHORT LOC_1610		0x1625
--- new bb ---

83 C4 0C		ADD     ESP, 0CH		0x1627
C3		RETN		0x162a
--- new bb ---

C3		RETN		0x1630

--- new func --- ___do_global_ctors
--- new bb ---

53		PUSH    EBX		0x1640
83 EC 18		SUB     ESP, 18H		0x1641
8B 1D 10 26 00 00		MOV     EBX, DS:___CTOR_LIST__		0x1644
83 FB FF		CMP     NPTRS, 0FFFFFFFFH		0x164a
74 29		JZ      SHORT LOC_1678		0x164d
--- new bb ---

85 DB		TEST    I, I		0x164f
74 11		JZ      SHORT LOC_1664		0x1651
--- new bb ---

8D 74 26 00		LEA     ESI, [ESI+0]		0x1653
90		NOP		0x1657
--- new bb ---

FF 14 9D 10 26 00 00		CALL    DS:___CTOR_LIST__[I*4]		0x1658
83 EB 01		SUB     EBX, 1		0x165f
75 F4		JNZ     SHORT LOC_1658		0x1662
--- new bb ---

C7 04 24 00 16 00 00		MOV     [ESP+1CH+FUNC], OFFSET ___DO_GLOBAL_DTORS; FUNC		0x1664
E8 60 FE FF FF		CALL    _ATEXIT		0x166b
83 C4 18		ADD     ESP, 18H		0x1670
5B		POP     I		0x1673
C3		RETN		0x1674
--- new bb ---

31 C0		XOR     EAX, EAX		0x1678
8D B6 00 00 00 00		LEA     ESI, [ESI+0]		0x167a
--- new bb ---

89 C3		MOV     EBX, NPTRS		0x1680
83 C0 01		ADD     NPTRS, 1		0x1682
8B 14 85 10 26 00 00		MOV     EDX, DS:___CTOR_LIST__[EAX*4]		0x1685
85 D2		TEST    EDX, EDX		0x168c
75 F0		JNZ     SHORT LOC_1680		0x168e
--- new bb ---

EB BD		JMP     SHORT LOC_164F		0x1690

--- new func --- ___main
--- new bb ---

A1 3C 60 00 00		MOV     EAX, DS:_INITIALIZED		0x16a0
85 C0		TEST    EAX, EAX		0x16a5
74 07		JZ      SHORT LOC_16B0		0x16a7
--- new bb ---

C3		RETN		0x16a9
--- new bb ---

C7 05 3C 60 00 00 01 00 00 00		MOV     DS:_INITIALIZED, 1		0x16b0
EB 84		JMP     SHORT ___DO_GLOBAL_CTORS		0x16ba
--- new bb ---

53		PUSH    EBX		0x1640

--- new func --- _my_lconv_init
--- new bb ---

FF 25 30 71 00 00		JMP     DS:__IMP____LCONV_INIT		0x16c0

--- new func --- __setargv
--- new bb ---

31 C0		XOR     EAX, EAX		0x16d0
C3		RETN		0x16d2

--- new func --- ___dyn_tls_dtor@12
--- new bb ---

83 EC 1C		SUB     ESP, 1CH		0x16e0
8B 44 24 24		MOV     EAX, [ESP+1CH+DWREASON]		0x16e3
83 F8 03		CMP     EAX, 3		0x16e7
74 14		JZ      SHORT LOC_1700		0x16ea
--- new bb ---

85 C0		TEST    EAX, EAX		0x16ec
74 10		JZ      SHORT LOC_1700		0x16ee
--- new bb ---

B8 01 00 00 00		MOV     EAX, 1		0x16f0
83 C4 1C		ADD     ESP, 1CH		0x16f5
C2 0C 00		RETN    0CH		0x16f8
--- new bb ---

89 44 24 04		MOV     [ESP+1CH+REASON], EAX; REASON		0x1700
8B 54 24 28		MOV     EDX, [ESP+1CH+LPRESERVED]		0x1704
8B 44 24 20		MOV     EAX, [ESP+1CH+HDLLHANDLE]		0x1708
89 54 24 08		MOV     [ESP+1CH+RESERVED], EDX; RESERVED		0x170c
89 04 24		MOV     [ESP+1CH+VAR_1C], EAX; HDLLHANDLE		0x1710
E8 38 09 00 00		CALL    ___MINGW_TLSCALLBACK		0x1713
B8 01 00 00 00		MOV     EAX, 1		0x1718
83 C4 1C		ADD     ESP, 1CH		0x171d
C2 0C 00		RETN    0CH		0x1720

--- new func --- ___dyn_tls_init@12
--- new bb ---

56		PUSH    ESI		0x1730
53		PUSH    EBX		0x1731
83 EC 14		SUB     ESP, 14H		0x1732
83 3D 18 30 00 00 02		CMP     __CRT_MT, 2		0x1735
8B 44 24 24		MOV     EAX, [ESP+1CH+DWREASON]		0x173c
74 0A		JZ      SHORT LOC_174C		0x1740
--- new bb ---

C7 05 18 30 00 00 02 00 00 00		MOV     __CRT_MT, 2		0x1742
--- new bb ---

83 F8 02		CMP     EAX, 2		0x174c
74 17		JZ      SHORT LOC_1768		0x174f
--- new bb ---

83 F8 01		CMP     EAX, 1		0x1751
74 4A		JZ      SHORT LOC_17A0		0x1754
--- new bb ---

83 C4 14		ADD     ESP, 14H		0x1756
B8 01 00 00 00		MOV     EAX, 1		0x1759
5B		POP     EBX		0x175e
5E		POP     ESI		0x175f
C2 0C 00		RETN    0CH		0x1760
--- new bb ---

BB 30 80 00 00		MOV     EBX, OFFSET ___XD_Z		0x1768
BE 30 80 00 00		MOV     ESI, OFFSET ___XD_Z		0x176d
39 DE		CMP     ESI, EBX		0x1772
74 E0		JZ      SHORT LOC_1756		0x1774
--- new bb ---

8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x1776
8D 76 00		LEA     ESI, [ESI+0]		0x177d
--- new bb ---

8B 03		MOV     EAX, [EBX]		0x1780
85 C0		TEST    EAX, EAX		0x1782
74 02		JZ      SHORT LOC_1788		0x1784
--- new bb ---

FF D0		CALL    EAX		0x1786
--- new bb ---

83 C3 04		ADD     EBX, 4		0x1788
39 DE		CMP     ESI, EBX		0x178b
75 F1		JNZ     SHORT LOC_1780		0x178d
--- new bb ---

83 C4 14		ADD     ESP, 14H		0x178f
B8 01 00 00 00		MOV     EAX, 1		0x1792
5B		POP     EBX		0x1797
5E		POP     ESI		0x1798
C2 0C 00		RETN    0CH		0x1799
--- new bb ---

8B 44 24 28		MOV     EAX, [ESP+1CH+LPRESERVED]		0x17a0
C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+REASON], 1; REASON		0x17a4
89 44 24 08		MOV     [ESP+1CH+RESERVED], EAX; RESERVED		0x17ac
8B 44 24 20		MOV     EAX, [ESP+1CH+HDLLHANDLE]		0x17b0
89 04 24		MOV     [ESP+1CH+VAR_1C], EAX; HDLLHANDLE		0x17b4
E8 94 08 00 00		CALL    ___MINGW_TLSCALLBACK		0x17b7
83 C4 14		ADD     ESP, 14H		0x17bc
B8 01 00 00 00		MOV     EAX, 1		0x17bf
5B		POP     EBX		0x17c4
5E		POP     ESI		0x17c5
C2 0C 00		RETN    0CH		0x17c6

--- new func --- ___tlregdtor
--- new bb ---

31 C0		XOR     EAX, EAX		0x17d0
C3		RETN		0x17d2

--- new func --- __matherr
--- new bb ---

56		PUSH    ESI		0x17e0
53		PUSH    EBX		0x17e1
BB 6C 40 00 00		MOV     EBX, OFFSET AUNKNOWNERROR; "UNKNOWN ERROR"		0x17e2
83 EC 54		SUB     ESP, 54H		0x17e7
8B 44 24 60		MOV     EAX, [ESP+5CH+PEXCEPT]		0x17ea
8B 08		MOV     ECX, [EAX]		0x17ee
8D 51 FF		LEA     EDX, [ECX-1]		0x17f0
83 FA 05		CMP     EDX, 5		0x17f3
77 07		JA      SHORT LOC_17FF		0x17f6
--- new bb ---

8B 1C 95 88 41 00 00		MOV     EBX, DS:_CSWTCH_1[EDX*4]		0x17f8
--- new bb ---

DD 40 18		FLD     QWORD PTR [EAX+18H]		0x17ff
8B 70 04		MOV     ESI, [EAX+4]		0x1802
DD 5C 24 48		FSTP    [ESP+5CH+VAR_14]		0x1805
DD 40 10		FLD     QWORD PTR [EAX+10H]		0x1809
DD 5C 24 40		FSTP    [ESP+5CH+VAR_1C]		0x180c
DD 40 08		FLD     QWORD PTR [EAX+8]		0x1810
C7 04 24 02 00 00 00		MOV     [ESP+5CH+INDEX], 2; INDEX		0x1813
DD 5C 24 38		FSTP    [ESP+5CH+VAR_24]		0x181a
E8 AD 0D 00 00		CALL    ___ACRT_IOB_FUNC		0x181e
DD 44 24 48		FLD     [ESP+5CH+VAR_14]		0x1823
89 74 24 0C		MOV     [ESP+5CH+VAR_50], ESI		0x1827
89 5C 24 08		MOV     [ESP+5CH+VAR_54], TYPE		0x182b
C7 44 24 04 7C 40 00 00		MOV     [ESP+5CH+FORMAT], OFFSET FORMAT; "_MATHERR(): %S IN %S(%G, %G)  (RETVAL=%"...		0x182f
DD 5C 24 20		FSTP    [ESP+5CH+VAR_3C]		0x1837
DD 44 24 40		FLD     [ESP+5CH+VAR_1C]		0x183b
89 04 24		MOV     [ESP+5CH+INDEX], EAX; STREAM		0x183f
DD 5C 24 18		FSTP    [ESP+5CH+VAR_44]		0x1842
DD 44 24 38		FLD     [ESP+5CH+VAR_24]		0x1846
DD 5C 24 10		FSTP    [ESP+5CH+VAR_4C]		0x184a
E8 01 0D 00 00		CALL    _FPRINTF		0x184e
83 C4 54		ADD     ESP, 54H		0x1853
31 C0		XOR     EAX, EAX		0x1856
5B		POP     TYPE		0x1858
5E		POP     ESI		0x1859
C3		RETN		0x185a

--- new func --- _fpreset
--- new bb ---

DB E3		FNINIT		0x1860
C3		RETN		0x1862

--- new func --- ___report_error
--- new bb ---

53		PUSH    EBX		0x1870
83 EC 18		SUB     ESP, 18H		0x1871
C7 04 24 02 00 00 00		MOV     [ESP+1CH+INDEX], 2; INDEX		0x1874
8D 5C 24 24		LEA     EBX, [ESP+1CH+ARGLIST]		0x187b
E8 4C 0D 00 00		CALL    ___ACRT_IOB_FUNC		0x187f
C7 44 24 08 1B 00 00 00		MOV     [ESP+1CH+ELEMENTCOUNT], 1BH; ELEMENTCOUNT		0x1884
89 44 24 0C		MOV     [ESP+1CH+STREAM], EAX; STREAM		0x188c
C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+ELEMENTSIZE], 1; ELEMENTSIZE		0x1890
C7 04 24 A0 41 00 00		MOV     [ESP+1CH+INDEX], OFFSET AMINGWW64RUNTIM; "MINGW-W64 RUNTIME FAILURE:\N"		0x1898
E8 A0 0C 00 00		CALL    _FWRITE		0x189f
C7 04 24 02 00 00 00		MOV     [ESP+1CH+INDEX], 2; INDEX		0x18a4
E8 20 0D 00 00		CALL    ___ACRT_IOB_FUNC		0x18ab
8B 54 24 20		MOV     EDX, [ESP+1CH+MSG]		0x18b0
89 5C 24 08		MOV     [ESP+1CH+ELEMENTCOUNT], ARGP; ARGLIST		0x18b4
89 04 24		MOV     [ESP+1CH+INDEX], EAX; STREAM		0x18b8
89 54 24 04		MOV     [ESP+1CH+ELEMENTSIZE], EDX; FORMAT		0x18bb
E8 48 0C 00 00		CALL    _VFPRINTF		0x18bf
E8 A3 0C 00 00		CALL    _ABORT		0x18c4

--- new func --- _mark_section_writable
--- new bb ---

57		PUSH    EDI		0x18d0
56		PUSH    ESI		0x18d1
53		PUSH    EBX		0x18d2
89 C3		MOV     EBX, ADDR		0x18d3
83 EC 30		SUB     ESP, 30H		0x18d5
8B 35 68 60 00 00		MOV     ESI, DS:_MAXSECTIONS		0x18d8
85 F6		TEST    ESI, ESI		0x18de
0F 8E 0A 01 00 00		JLE     LOC_19F0		0x18e0
--- new bb ---

A1 6C 60 00 00		MOV     ADDR, DS:_THE_SECS		0x18e6
31 C9		XOR     ECX, ECX		0x18eb
83 C0 0C		ADD     EAX, 0CH		0x18ed
--- new bb ---

8B 10		MOV     EDX, [EAX]		0x18f0
39 DA		CMP     EDX, ADDR		0x18f2
77 0E		JA      SHORT LOC_1904		0x18f4
--- new bb ---

8B 78 04		MOV     EDI, [EAX+4]		0x18f6
03 57 08		ADD     EDX, [EDI+8]		0x18f9
39 D3		CMP     ADDR, EDX		0x18fc
0F 82 83 00 00 00		JB      LOC_1987		0x18fe
--- new bb ---

83 C1 01		ADD     I, 1		0x1904
83 C0 14		ADD     EAX, 14H		0x1907
39 F1		CMP     I, ESI		0x190a
75 E2		JNZ     SHORT LOC_18F0		0x190c
--- new bb ---

89 1C 24		MOV     [ESP+3CH+P], ADDR; P		0x190e
E8 4A 09 00 00		CALL    ___MINGW_GETSECTIONFORADDRESS		0x1911
89 C7		MOV     EDI, EAX		0x1916
85 C0		TEST    H, H		0x1918
0F 84 F7 00 00 00		JZ      LOC_1A17		0x191a
--- new bb ---

A1 6C 60 00 00		MOV     H, DS:_THE_SECS		0x1920
8D 1C B6		LEA     ADDR, [ESI+ESI*4]		0x1925
C1 E3 02		SHL     EBX, 2		0x1928
01 D8		ADD     EAX, EBX		0x192b
89 78 10		MOV     [EAX+10H], H		0x192d
C7 00 00 00 00 00		MOV     DWORD PTR [EAX], 0		0x1930
E8 35 0A 00 00		CALL    __GETPEIMAGEBASE		0x1936
8B 15 6C 60 00 00		MOV     EDX, DS:_THE_SECS		0x193b
03 47 0C		ADD     EAX, [H+0CH]		0x1941
89 44 1A 0C		MOV     [EDX+EBX+0CH], EAX		0x1944
8D 54 24 14		LEA     EDX, [ESP+3CH+B]		0x1948
C7 44 24 08 1C 00 00 00		MOV     [ESP+3CH+DWLENGTH], 1CH; DWLENGTH		0x194c
89 54 24 04		MOV     [ESP+3CH+LPBUFFER], EDX; LPBUFFER		0x1954
89 04 24		MOV     [ESP+3CH+P], EAX; LPADDRESS		0x1958
FF 15 20 71 00 00		CALL    DS:__IMP__VIRTUALQUERY@12; VIRTUALQUERY(X,X,X)		0x195b
83 EC 0C		SUB     ESP, 0CH		0x1961
85 C0		TEST    EAX, EAX		0x1964
0F 84 8B 00 00 00		JZ      LOC_19F7		0x1966
--- new bb ---

8B 44 24 28		MOV     EAX, [ESP+3CH+B.PROTECT]		0x196c
8D 50 C0		LEA     EDX, [EAX-40H]		0x1970
83 E2 BF		AND     EDX, 0FFFFFFBFH		0x1973
74 08		JZ      SHORT LOC_1980		0x1976
--- new bb ---

8D 50 FC		LEA     EDX, [EAX-4]		0x1978
83 E2 FB		AND     EDX, 0FFFFFFFBH		0x197b
75 10		JNZ     SHORT LOC_1990		0x197e
--- new bb ---

83 05 68 60 00 00 01		ADD     DS:_MAXSECTIONS, 1		0x1980
--- new bb ---

83 C4 30		ADD     ESP, 30H		0x1987
5B		POP     EBX		0x198a
5E		POP     ESI		0x198b
5F		POP     EDI		0x198c
C3		RETN		0x198d
--- new bb ---

83 F8 02		CMP     EAX, 2		0x1990
BA 40 00 00 00		MOV     EDX, 40H ; '@'		0x1993
B8 04 00 00 00		MOV     EAX, 4		0x1998
8B 4C 24 20		MOV     ECX, [ESP+3CH+B.REGIONSIZE]		0x199d
0F 45 C2		CMOVNZ  EAX, EDX		0x19a1
8B 54 24 14		MOV     EDX, [ESP+3CH+B.BASEADDRESS]		0x19a4
03 1D 6C 60 00 00		ADD     EBX, DS:_THE_SECS		0x19a8
89 4B 08		MOV     [EBX+8], ECX		0x19ae
89 53 04		MOV     [EBX+4], EDX		0x19b1
89 5C 24 0C		MOV     [ESP+3CH+LPFLOLDPROTECT], EBX; LPFLOLDPROTECT		0x19b4
89 44 24 08		MOV     [ESP+3CH+DWLENGTH], NEW_PROTECT; FLNEWPROTECT		0x19b8
89 4C 24 04		MOV     [ESP+3CH+LPBUFFER], ECX; DWSIZE		0x19bc
89 14 24		MOV     [ESP+3CH+P], EDX; LPADDRESS		0x19c0
FF 15 1C 71 00 00		CALL    DS:__IMP__VIRTUALPROTECT@16; VIRTUALPROTECT(X,X,X,X)		0x19c3
83 EC 10		SUB     ESP, 10H		0x19c9
85 C0		TEST    EAX, EAX		0x19cc
75 B0		JNZ     SHORT LOC_1980		0x19ce
--- new bb ---

FF 15 F4 70 00 00		CALL    DS:__IMP__GETLASTERROR@0; GETLASTERROR()		0x19d0
C7 04 24 10 42 00 00		MOV     [ESP+3CH+P], OFFSET MSG; "  VIRTUALPROTECT FAILED WITH CODE 0X%X"		0x19d6
89 44 24 04		MOV     [ESP+3CH+LPBUFFER], EAX		0x19dd
E8 8A FE FF FF		CALL    ___REPORT_ERROR		0x19e1
--- new bb ---

31 F6		XOR     ESI, ESI		0x19f0
E9 17 FF FF FF		JMP     LOC_190E		0x19f2
--- new bb ---

A1 6C 60 00 00		MOV     EAX, DS:_THE_SECS		0x19f7
8B 44 18 0C		MOV     EAX, [EAX+EBX+0CH]		0x19fc
89 44 24 08		MOV     [ESP+3CH+DWLENGTH], EAX		0x1a00
8B 47 08		MOV     EAX, [H+8]		0x1a04
C7 04 24 DC 41 00 00		MOV     [ESP+3CH+P], OFFSET AVIRTUALQUERYFA; "  VIRTUALQUERY FAILED FOR %D BYTES AT A"...		0x1a07
89 44 24 04		MOV     [ESP+3CH+LPBUFFER], EAX		0x1a0e
E8 59 FE FF FF		CALL    ___REPORT_ERROR		0x1a12
--- new bb ---

89 5C 24 04		MOV     [ESP+3CH+LPBUFFER], ADDR		0x1a17
C7 04 24 BC 41 00 00		MOV     [ESP+3CH+P], OFFSET AADDRESSPHASNOI; "ADDRESS %P HAS NO IMAGE-SECTION"		0x1a1b
E8 49 FE FF FF		CALL    ___REPORT_ERROR		0x1a22

--- new func --- __pei386_runtime_relocator
--- new bb ---

55		PUSH    EBP		0x1a30
89 E5		MOV     EBP, ESP		0x1a31
57		PUSH    EDI		0x1a33
56		PUSH    ESI		0x1a34
53		PUSH    EBX		0x1a35
83 EC 3C		SUB     ESP, 3CH		0x1a36
A1 64 60 00 00		MOV     EAX, DS:_WAS_INIT_63554		0x1a39
89 45 CC		MOV     [EBP+VAR_34], EAX		0x1a3e
85 C0		TEST    EAX, EAX		0x1a41
74 0B		JZ      SHORT LOC_1A50		0x1a43
--- new bb ---

8D 65 F4		LEA     ESP, [EBP-0CH]		0x1a45
5B		POP     EBX		0x1a48
5E		POP     ESI		0x1a49
5F		POP     EDI		0x1a4a
5D		POP     EBP		0x1a4b
C3		RETN		0x1a4c
--- new bb ---

C7 05 64 60 00 00 01 00 00 00		MOV     DS:_WAS_INIT_63554, 1		0x1a50
E8 81 08 00 00		CALL    ___MINGW_GETSECTIONCOUNT		0x1a5a
8D 04 80		LEA     MSECS, [MSECS+MSECS*4]		0x1a5f
8D 04 85 1B 00 00 00		LEA     EAX, DS:1BH[EAX*4]		0x1a62
C1 E8 04		SHR     EAX, 4		0x1a69
C1 E0 04		SHL     EAX, 4		0x1a6c
E8 6C 0A 00 00		CALL    ___CHKSTK_MS		0x1a6f
C7 05 68 60 00 00 00 00 00 00		MOV     DS:_MAXSECTIONS, 0		0x1a74
29 C4		SUB     ESP, EAX		0x1a7e
8D 44 24 1F		LEA     EAX, [ESP+1FH]		0x1a80
83 E0 F0		AND     EAX, 0FFFFFFF0H		0x1a84
A3 6C 60 00 00		MOV     DS:_THE_SECS, EAX		0x1a87
B8 18 46 00 00		MOV     EAX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1a8c
2D 18 46 00 00		SUB     EAX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1a91
83 F8 07		CMP     EAX, 7		0x1a96
7E AA		JLE     SHORT LOC_1A45		0x1a99
--- new bb ---

8B 15 18 46 00 00		MOV     EDX, DS:__RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1a9b
83 F8 0B		CMP     EAX, 0BH		0x1aa1
0F 8F 96 00 00 00		JG      LOC_1B40		0x1aa4
--- new bb ---

BB 18 46 00 00		MOV     EBX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1aaa
--- new bb ---

85 D2		TEST    EDX, EDX		0x1aaf
0F 85 8E 01 00 00		JNZ     LOC_1C45		0x1ab1
--- new bb ---

8B 43 04		MOV     EAX, [EBX+4]		0x1ab7
--- new bb ---

85 C0		TEST    EAX, EAX		0x1aba
0F 85 83 01 00 00		JNZ     LOC_1C45		0x1abc
--- new bb ---

8B 43 08		MOV     EAX, [EBX+8]		0x1ac2
83 F8 01		CMP     EAX, 1		0x1ac5
0F 85 C4 01 00 00		JNZ     LOC_1C92		0x1ac8
--- new bb ---

8D 7B 0C		LEA     EDI, [EBX+0CH]		0x1ace
81 FF 18 46 00 00		CMP     EDI, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1ad1
72 26		JB      SHORT LOC_1AFF		0x1ad7
--- new bb ---

E9 67 FF FF FF		JMP     LOC_1A45		0x1ad9
--- new bb ---

2B 45 D4		SUB     EAX, [EBP+VAR_2C]		0x1ae0
03 03		ADD     EAX, [EBX]		0x1ae3
89 C6		MOV     ESI, EAX		0x1ae5
89 D8		MOV     EAX, EBX; ADDR		0x1ae7
E8 E2 FD FF FF		CALL    _MARK_SECTION_WRITABLE		0x1ae9
89 33		MOV     [EBX], ESI		0x1aee
--- new bb ---

83 C7 0C		ADD     EDI, 0CH		0x1af0
81 FF 18 46 00 00		CMP     EDI, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1af3
0F 83 B1 00 00 00		JNB     LOC_1BB0		0x1af9
--- new bb ---

8B 07		MOV     EAX, [EDI]		0x1aff
8B 4F 04		MOV     ECX, [EDI+4]		0x1b01
0F B6 57 08		MOVZX   EDX, BYTE PTR [EDI+8]		0x1b04
8D B0 00 00 40 00		LEA     ESI, [EAX+400000H]		0x1b08
8D 99 00 00 40 00		LEA     EBX, [ECX+400000H]		0x1b0e
8B 80 00 00 40 00		MOV     EAX, [EAX+400000H]		0x1b14
89 75 D4		MOV     [EBP+VAR_2C], ESI		0x1b1a
83 FA 10		CMP     EDX, 10H		0x1b1d
74 4E		JZ      SHORT LOC_1B70		0x1b20
--- new bb ---

83 FA 20		CMP     EDX, 20H ; ' '		0x1b22
74 B9		JZ      SHORT LOC_1AE0		0x1b25
--- new bb ---

83 FA 08		CMP     EDX, 8		0x1b27
0F 84 E0 00 00 00		JZ      LOC_1C10		0x1b2a
--- new bb ---

89 54 24 04		MOV     [ESP+4], EDX		0x1b30
C7 04 24 6C 42 00 00		MOV     DWORD PTR [ESP], OFFSET AUNKNOWNPSEUDOR; "  UNKNOWN PSEUDO RELOCATION BIT SIZE %D"...		0x1b34
E8 30 FD FF FF		CALL    ___REPORT_ERROR		0x1b3b
--- new bb ---

85 D2		TEST    EDX, EDX		0x1b40
0F 85 F8 00 00 00		JNZ     LOC_1C40		0x1b42
--- new bb ---

A1 1C 46 00 00		MOV     EAX, DS:DWORD_461C		0x1b48
89 C7		MOV     EDI, EAX		0x1b4d
0B 3D 20 46 00 00		OR      EDI, DS:DWORD_4620		0x1b4f
0F 85 2D 01 00 00		JNZ     LOC_1C88		0x1b55
--- new bb ---

8B 15 24 46 00 00		MOV     EDX, DS:DWORD_4624		0x1b5b
BB 24 46 00 00		MOV     EBX, OFFSET DWORD_4624		0x1b61
E9 44 FF FF FF		JMP     LOC_1AAF		0x1b66
--- new bb ---

0F B7 B1 00 00 40 00		MOVZX   ESI, WORD PTR [ECX+400000H]		0x1b70
89 4D D0		MOV     [EBP+VAR_30], ECX		0x1b77
89 F1		MOV     ECX, ESI		0x1b7a
81 C9 00 00 FF FF		OR      ECX, 0FFFF0000H		0x1b7c
66 85 F6		TEST    SI, SI		0x1b82
0F 48 F1		CMOVS   ESI, ECX		0x1b85
2B 75 D4		SUB     ESI, [EBP+VAR_2C]		0x1b88
83 C7 0C		ADD     EDI, 0CH		0x1b8b
01 C6		ADD     ESI, EAX		0x1b8e
89 D8		MOV     EAX, EBX; ADDR		0x1b90
E8 39 FD FF FF		CALL    _MARK_SECTION_WRITABLE		0x1b92
8B 4D D0		MOV     ECX, [EBP+VAR_30]		0x1b97
66 89 B1 00 00 40 00		MOV     [ECX+400000H], SI		0x1b9a
81 FF 18 46 00 00		CMP     EDI, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1ba1
0F 82 52 FF FF FF		JB      LOC_1AFF		0x1ba7
--- new bb ---

8D 76 00		LEA     ESI, [ESI+0]		0x1bad
--- new bb ---

A1 68 60 00 00		MOV     EAX, DS:_MAXSECTIONS		0x1bb0
85 C0		TEST    EAX, EAX		0x1bb5
0F 8E 88 FE FF FF		JLE     LOC_1A45		0x1bb7
--- new bb ---

8B 1D 1C 71 00 00		MOV     EBX, DS:__IMP__VIRTUALPROTECT@16; VIRTUALPROTECT(X,X,X,X)		0x1bbd
8B 7D CC		MOV     EDI, [EBP+VAR_34]		0x1bc3
8D 75 E4		LEA     ESI, [EBP+VAR_1C]		0x1bc6
8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x1bc9
--- new bb ---

8B 15 6C 60 00 00		MOV     EDX, DS:_THE_SECS		0x1bd0
8D 04 BF		LEA     EAX, [EDI+EDI*4]		0x1bd6
8D 04 82		LEA     EAX, [EDX+EAX*4]		0x1bd9
8B 10		MOV     EDX, [EAX]		0x1bdc
85 D2		TEST    EDX, EDX		0x1bde
74 1A		JZ      SHORT LOC_1BFC		0x1be0
--- new bb ---

89 74 24 0C		MOV     [ESP+0CH], ESI; LPFLOLDPROTECT		0x1be2
89 54 24 08		MOV     [ESP+8], EDX; FLNEWPROTECT		0x1be6
8B 50 08		MOV     EDX, [EAX+8]		0x1bea
89 54 24 04		MOV     [ESP+4], EDX; DWSIZE		0x1bed
8B 40 04		MOV     EAX, [EAX+4]		0x1bf1
89 04 24		MOV     [ESP], EAX; LPADDRESS		0x1bf4
FF D3		CALL    EBX ; VIRTUALPROTECT(X,X,X,X); VIRTUALPROTECT(X,X,X,X)		0x1bf7
83 EC 10		SUB     ESP, 10H		0x1bf9
--- new bb ---

83 C7 01		ADD     EDI, 1		0x1bfc
3B 3D 68 60 00 00		CMP     EDI, DS:_MAXSECTIONS		0x1bff
7C C9		JL      SHORT LOC_1BD0		0x1c05
--- new bb ---

8D 65 F4		LEA     ESP, [EBP-0CH]		0x1c07
5B		POP     EBX		0x1c0a
5E		POP     ESI		0x1c0b
5F		POP     EDI		0x1c0c
5D		POP     EBP		0x1c0d
C3		RETN		0x1c0e
--- new bb ---

0F B6 13		MOVZX   EDX, BYTE PTR [EBX]		0x1c10
89 D6		MOV     ESI, EDX		0x1c13
81 CE 00 FF FF FF		OR      ESI, 0FFFFFF00H		0x1c15
84 D2		TEST    DL, DL		0x1c1b
0F 48 D6		CMOVS   EDX, ESI		0x1c1d
2B 55 D4		SUB     EDX, [EBP+VAR_2C]		0x1c20
8D 34 02		LEA     ESI, [EDX+EAX]		0x1c23
89 D8		MOV     EAX, EBX; ADDR		0x1c26
E8 A3 FC FF FF		CALL    _MARK_SECTION_WRITABLE		0x1c28
89 F0		MOV     EAX, ESI		0x1c2d
88 03		MOV     [EBX], AL		0x1c2f
E9 BA FE FF FF		JMP     LOC_1AF0		0x1c31
--- new bb ---

BB 18 46 00 00		MOV     EBX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1c40
--- new bb ---

81 FB 18 46 00 00		CMP     EBX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1c45
0F 83 F4 FD FF FF		JNB     LOC_1A45		0x1c4b
--- new bb ---

8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x1c51
--- new bb ---

8B 73 04		MOV     ESI, [EBX+4]		0x1c58
8B 3B		MOV     EDI, [EBX]		0x1c5b
83 C3 08		ADD     EBX, 8		0x1c5d
03 BE 00 00 40 00		ADD     EDI, [ESI+400000H]		0x1c60
8D 86 00 00 40 00		LEA     EAX, [ESI+400000H]; ADDR		0x1c66
E8 5F FC FF FF		CALL    _MARK_SECTION_WRITABLE		0x1c6c
89 BE 00 00 40 00		MOV     [ESI+400000H], EDI		0x1c71
81 FB 18 46 00 00		CMP     EBX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1c77
72 D9		JB      SHORT LOC_1C58		0x1c7d
--- new bb ---

E9 2C FF FF FF		JMP     LOC_1BB0		0x1c7f
--- new bb ---

BB 18 46 00 00		MOV     EBX, OFFSET __RUNTIME_PSEUDO_RELOC_LIST_END___0		0x1c88
E9 28 FE FF FF		JMP     LOC_1ABA		0x1c8d
--- new bb ---

89 44 24 04		MOV     [ESP+4], EAX		0x1c92
C7 04 24 38 42 00 00		MOV     DWORD PTR [ESP], OFFSET AUNKNOWNPSEUDOR_0; "  UNKNOWN PSEUDO RELOCATION PROTOCOL VE"...		0x1c96
E8 CE FB FF FF		CALL    ___REPORT_ERROR		0x1c9d

--- new func --- ___mingw_raise_matherr
--- new bb ---

83 EC 3C		SUB     ESP, 3CH		0x1cb0
A1 70 60 00 00		MOV     EAX, DS:_STUSERMATHERR		0x1cb3
DD 44 24 48		FLD     [ESP+3CH+A1]		0x1cb8
DD 44 24 50		FLD     [ESP+3CH+A2]		0x1cbc
DD 44 24 58		FLD     [ESP+3CH+RSLT]		0x1cc0
85 C0		TEST    EAX, EAX		0x1cc4
74 30		JZ      SHORT LOC_1CF8		0x1cc6
--- new bb ---

D9 CA		FXCH    ST(2)		0x1cc8
8B 54 24 40		MOV     EDX, [ESP+3CH+TYP]		0x1cca
DD 5C 24 18		FSTP    [ESP+3CH+EX.ARG1]		0x1cce
DD 5C 24 20		FSTP    [ESP+3CH+EX.ARG2]		0x1cd2
89 54 24 10		MOV     [ESP+3CH+EX.TYPE], EDX		0x1cd6
8B 54 24 44		MOV     EDX, [ESP+3CH+NAME]		0x1cda
DD 5C 24 28		FSTP    [ESP+3CH+EX.RETVAL]		0x1cde
89 54 24 14		MOV     [ESP+3CH+EX.NAME], EDX		0x1ce2
8D 54 24 10		LEA     EDX, [ESP+3CH+EX]		0x1ce6
89 14 24		MOV     [ESP+3CH+VAR_3C], EDX; _EXCEPTION *		0x1cea
FF D0		CALL    EAX ; _STUSERMATHERR		0x1ced
EB 0D		JMP     SHORT LOC_1CFE		0x1cef
--- new bb ---

DD D8		FSTP    ST		0x1cf8
DD D8		FSTP    ST		0x1cfa
DD D8		FSTP    ST		0x1cfc
--- new bb ---

83 C4 3C		ADD     ESP, 3CH		0x1cfe
C3		RETN		0x1d01

--- new func --- ___mingw_setusermatherr
--- new bb ---

8B 44 24 04		MOV     EAX, [ESP+F]		0x1d10
A3 70 60 00 00		MOV     DS:_STUSERMATHERR, EAX		0x1d14
E9 76 08 00 00		JMP     ___SETUSERMATHERR		0x1d19
--- new bb ---

FF 25 44 71 00 00		JMP     DS:__IMP____SETUSERMATHERR		0x2594

--- new func --- __gnu_exception_handler@4
--- new bb ---

53		PUSH    EBX		0x1d20
83 EC 18		SUB     ESP, 18H		0x1d21
8B 5C 24 20		MOV     EBX, [ESP+1CH+EXCEPTION_DATA]		0x1d24
8B 03		MOV     EAX, [EBX]		0x1d28
8B 00		MOV     EAX, [EAX]		0x1d2a
3D 93 00 00 C0		CMP     EAX, 0C0000093H		0x1d2c
74 1D		JZ      SHORT LOC_1D50		0x1d31
--- new bb ---

77 5B		JA      SHORT LOC_1D90		0x1d33
--- new bb ---

3D 1D 00 00 C0		CMP     EAX, 0C000001DH		0x1d35
0F 84 DB 00 00 00		JZ      LOC_1E1B		0x1d3a
--- new bb ---

0F 86 8A 00 00 00		JBE     LOC_1DD0		0x1d40
--- new bb ---

05 73 FF FF 3F		ADD     EAX, 3FFFFF73H		0x1d46
83 F8 04		CMP     EAX, 4		0x1d4b
77 25		JA      SHORT LOC_1D75		0x1d4e
--- new bb ---

C7 44 24 04 00 00 00 00		MOV     [ESP+1CH+FUNCTION], 0; FUNCTION		0x1d50
C7 04 24 08 00 00 00		MOV     [ESP+1CH+SIGNAL], 8; SIGNAL		0x1d58
E8 C0 07 00 00		CALL    _SIGNAL		0x1d5f
83 F8 01		CMP     OLD_HANDLER, 1		0x1d64
0F 84 F3 00 00 00		JZ      LOC_1E60		0x1d67
--- new bb ---

85 C0		TEST    OLD_HANDLER, OLD_HANDLER		0x1d6d
0F 85 0B 01 00 00		JNZ     LOC_1E80		0x1d6f
--- new bb ---

A1 78 60 00 00		MOV     EAX, DS:___MINGW_OLDEXCPT_HANDLER		0x1d75
85 C0		TEST    EAX, EAX		0x1d7a
0F 84 CE 00 00 00		JZ      LOC_1E50		0x1d7c
--- new bb ---

89 5C 24 20		MOV     [ESP+1CH+EXCEPTION_DATA], EBX		0x1d82
83 C4 18		ADD     ESP, 18H		0x1d86
5B		POP     EBX		0x1d89
FF E0		JMP     EAX		0x1d8a
--- new bb ---

3D 94 00 00 C0		CMP     EAX, 0C0000094H		0x1d90
75 79		JNZ     SHORT LOC_1E10		0x1d95
--- new bb ---

C7 44 24 04 00 00 00 00		MOV     [ESP+1CH+FUNCTION], 0; FUNCTION		0x1d97
C7 04 24 08 00 00 00		MOV     [ESP+1CH+SIGNAL], 8; SIGNAL		0x1d9f
E8 79 07 00 00		CALL    _SIGNAL		0x1da6
83 F8 01		CMP     OLD_HANDLER, 1		0x1dab
75 BD		JNZ     SHORT LOC_1D6D		0x1dae
--- new bb ---

C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+FUNCTION], 1; FUNCTION		0x1db0
C7 04 24 08 00 00 00		MOV     [ESP+1CH+SIGNAL], 8; SIGNAL		0x1db8
E8 60 07 00 00		CALL    _SIGNAL		0x1dbf
B8 FF FF FF FF		MOV     EAX, 0FFFFFFFFH		0x1dc4
E9 84 00 00 00		JMP     LOC_1E52		0x1dc9
--- new bb ---

3D 05 00 00 C0		CMP     EAX, 0C0000005H		0x1dd0
75 9E		JNZ     SHORT LOC_1D75		0x1dd5
--- new bb ---

C7 44 24 04 00 00 00 00		MOV     [ESP+1CH+FUNCTION], 0; FUNCTION		0x1dd7
C7 04 24 0B 00 00 00		MOV     [ESP+1CH+SIGNAL], 0BH; SIGNAL		0x1ddf
E8 39 07 00 00		CALL    _SIGNAL		0x1de6
83 F8 01		CMP     OLD_HANDLER, 1		0x1deb
0F 84 9C 00 00 00		JZ      LOC_1E90		0x1dee
--- new bb ---

85 C0		TEST    OLD_HANDLER, OLD_HANDLER		0x1df4
0F 84 79 FF FF FF		JZ      LOC_1D75		0x1df6
--- new bb ---

C7 04 24 0B 00 00 00		MOV     [ESP+1CH+SIGNAL], 0BH		0x1dfc
FF D0		CALL    OLD_HANDLER		0x1e03
B8 FF FF FF FF		MOV     EAX, 0FFFFFFFFH		0x1e05
EB 46		JMP     SHORT LOC_1E52		0x1e0a
--- new bb ---

3D 96 00 00 C0		CMP     EAX, 0C0000096H		0x1e10
0F 85 5A FF FF FF		JNZ     LOC_1D75		0x1e15
--- new bb ---

C7 44 24 04 00 00 00 00		MOV     [ESP+1CH+FUNCTION], 0; FUNCTION		0x1e1b
C7 04 24 04 00 00 00		MOV     [ESP+1CH+SIGNAL], 4; SIGNAL		0x1e23
E8 F5 06 00 00		CALL    _SIGNAL		0x1e2a
83 F8 01		CMP     OLD_HANDLER, 1		0x1e2f
74 75		JZ      SHORT LOC_1EA9		0x1e32
--- new bb ---

85 C0		TEST    OLD_HANDLER, OLD_HANDLER		0x1e34
0F 84 39 FF FF FF		JZ      LOC_1D75		0x1e36
--- new bb ---

C7 04 24 04 00 00 00		MOV     [ESP+1CH+SIGNAL], 4		0x1e3c
FF D0		CALL    OLD_HANDLER		0x1e43
B8 FF FF FF FF		MOV     EAX, 0FFFFFFFFH		0x1e45
EB 06		JMP     SHORT LOC_1E52		0x1e4a
--- new bb ---

31 C0		XOR     EAX, EAX		0x1e50
--- new bb ---

83 C4 18		ADD     ESP, 18H		0x1e52
5B		POP     EBX		0x1e55
C2 04 00		RETN    4		0x1e56
--- new bb ---

C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+FUNCTION], 1; FUNCTION		0x1e60
C7 04 24 08 00 00 00		MOV     [ESP+1CH+SIGNAL], 8; SIGNAL		0x1e68
E8 B0 06 00 00		CALL    _SIGNAL		0x1e6f
E8 E7 F9 FF FF		CALL    _FPRESET		0x1e74
B8 FF FF FF FF		MOV     EAX, 0FFFFFFFFH		0x1e79
EB D2		JMP     SHORT LOC_1E52		0x1e7e
--- new bb ---

C7 04 24 08 00 00 00		MOV     [ESP+1CH+SIGNAL], 8		0x1e80
FF D0		CALL    OLD_HANDLER		0x1e87
B8 FF FF FF FF		MOV     EAX, 0FFFFFFFFH		0x1e89
EB C2		JMP     SHORT LOC_1E52		0x1e8e
--- new bb ---

C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+FUNCTION], 1; FUNCTION		0x1e90
C7 04 24 0B 00 00 00		MOV     [ESP+1CH+SIGNAL], 0BH; SIGNAL		0x1e98
E8 80 06 00 00		CALL    _SIGNAL		0x1e9f
83 C8 FF		OR      EAX, 0FFFFFFFFH		0x1ea4
EB A9		JMP     SHORT LOC_1E52		0x1ea7
--- new bb ---

C7 44 24 04 01 00 00 00		MOV     [ESP+1CH+FUNCTION], 1; FUNCTION		0x1ea9
C7 04 24 04 00 00 00		MOV     [ESP+1CH+SIGNAL], 4; SIGNAL		0x1eb1
E8 67 06 00 00		CALL    _SIGNAL		0x1eb8
83 C8 FF		OR      EAX, 0FFFFFFFFH		0x1ebd
EB 90		JMP     SHORT LOC_1E52		0x1ec0

--- new func --- ___mingwthr_run_key_dtors.part.0
--- new bb ---

55		PUSH    EBP		0x1ed0
57		PUSH    EDI		0x1ed1
56		PUSH    ESI		0x1ed2
53		PUSH    EBX		0x1ed3
83 EC 1C		SUB     ESP, 1CH		0x1ed4
C7 04 24 84 60 00 00		MOV     [ESP+2CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x1ed7
FF 15 EC 70 00 00		CALL    DS:__IMP__ENTERCRITICALSECTION@4; ENTERCRITICALSECTION(X)		0x1ede
8B 1D 7C 60 00 00		MOV     EBX, DS:_KEY_DTOR_LIST		0x1ee4
83 EC 04		SUB     ESP, 4		0x1eea
85 DB		TEST    KEYP, KEYP		0x1eed
74 34		JZ      SHORT LOC_1F25		0x1eef
--- new bb ---

8B 2D 18 71 00 00		MOV     EBP, DS:__IMP__TLSGETVALUE@4; TLSGETVALUE(X)		0x1ef1
8B 3D F4 70 00 00		MOV     EDI, DS:__IMP__GETLASTERROR@0; GETLASTERROR()		0x1ef7
8D 76 00		LEA     ESI, [ESI+0]		0x1efd
--- new bb ---

8B 03		MOV     EAX, [KEYP]		0x1f00
89 04 24		MOV     [ESP+2CH+LPCRITICALSECTION], EAX; DWTLSINDEX		0x1f02
FF D5		CALL    EBP ; TLSGETVALUE(X); TLSGETVALUE(X)		0x1f05
83 EC 04		SUB     ESP, 4		0x1f07
89 C6		MOV     ESI, EAX		0x1f0a
FF D7		CALL    EDI ; GETLASTERROR(); GETLASTERROR()		0x1f0c
85 C0		TEST    EAX, EAX		0x1f0e
75 0C		JNZ     SHORT LOC_1F1E		0x1f10
--- new bb ---

85 F6		TEST    VALUE, VALUE		0x1f12
74 08		JZ      SHORT LOC_1F1E		0x1f14
--- new bb ---

8B 43 04		MOV     EAX, [KEYP+4]		0x1f16
89 34 24		MOV     [ESP+2CH+LPCRITICALSECTION], VALUE		0x1f19
FF D0		CALL    EAX		0x1f1c
--- new bb ---

8B 5B 08		MOV     KEYP, [KEYP+8]		0x1f1e
85 DB		TEST    KEYP, KEYP		0x1f21
75 DB		JNZ     SHORT LOC_1F00		0x1f23
--- new bb ---

C7 04 24 84 60 00 00		MOV     [ESP+2CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x1f25
FF 15 08 71 00 00		CALL    DS:__IMP__LEAVECRITICALSECTION@4; LEAVECRITICALSECTION(X)		0x1f2c
83 EC 04		SUB     ESP, 4		0x1f32
83 C4 1C		ADD     ESP, 1CH		0x1f35
5B		POP     KEYP		0x1f38
5E		POP     ESI		0x1f39
5F		POP     EDI		0x1f3a
5D		POP     EBP		0x1f3b
C3		RETN		0x1f3c

--- new func --- ____w64_mingwthr_add_key_dtor
--- new bb ---

A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x1f40
85 C0		TEST    EAX, EAX		0x1f45
75 07		JNZ     SHORT LOC_1F50		0x1f47
--- new bb ---

C3		RETN		0x1f49
--- new bb ---

53		PUSH    EBX		0x1f50
83 EC 18		SUB     ESP, 18H		0x1f51
C7 44 24 04 0C 00 00 00		MOV     [ESP+1CH+SIZE], 0CH; SIZE		0x1f54
C7 04 24 01 00 00 00		MOV     [ESP+1CH+COUNT], 1; COUNT		0x1f5c
E8 FC 05 00 00		CALL    _CALLOC		0x1f63
89 C3		MOV     EBX, EAX		0x1f68
85 C0		TEST    NEW_KEY, NEW_KEY		0x1f6a
74 42		JZ      SHORT LOC_1FB0		0x1f6c
--- new bb ---

8B 44 24 20		MOV     NEW_KEY, [ESP+1CH+KEY]		0x1f6e
C7 04 24 84 60 00 00		MOV     [ESP+1CH+COUNT], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x1f72
89 03		MOV     [NEW_KEY], EAX		0x1f79
8B 44 24 24		MOV     EAX, [ESP+1CH+DTOR]		0x1f7b
89 43 04		MOV     [NEW_KEY+4], EAX		0x1f7f
FF 15 EC 70 00 00		CALL    DS:__IMP__ENTERCRITICALSECTION@4; ENTERCRITICALSECTION(X)		0x1f82
A1 7C 60 00 00		MOV     EAX, DS:_KEY_DTOR_LIST		0x1f88
89 1D 7C 60 00 00		MOV     DS:_KEY_DTOR_LIST, NEW_KEY		0x1f8d
83 EC 04		SUB     ESP, 4		0x1f93
89 43 08		MOV     [NEW_KEY+8], EAX		0x1f96
C7 04 24 84 60 00 00		MOV     [ESP+1CH+COUNT], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x1f99
FF 15 08 71 00 00		CALL    DS:__IMP__LEAVECRITICALSECTION@4; LEAVECRITICALSECTION(X)		0x1fa0
31 C0		XOR     EAX, EAX		0x1fa6
83 EC 04		SUB     ESP, 4		0x1fa8
--- new bb ---

83 C4 18		ADD     ESP, 18H		0x1fab
5B		POP     NEW_KEY		0x1fae
C3		RETN		0x1faf
--- new bb ---

83 C8 FF		OR      NEW_KEY, 0FFFFFFFFH		0x1fb0
EB F6		JMP     SHORT LOC_1FAB		0x1fb3

--- new func --- ____w64_mingwthr_remove_key_dtor
--- new bb ---

53		PUSH    EBX		0x1fc0
83 EC 18		SUB     ESP, 18H		0x1fc1
A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x1fc4
8B 5C 24 20		MOV     EBX, [ESP+1CH+KEY]		0x1fc9
85 C0		TEST    EAX, EAX		0x1fcd
75 0F		JNZ     SHORT LOC_1FE0		0x1fcf
--- new bb ---

83 C4 18		ADD     ESP, 18H		0x1fd1
31 C0		XOR     EAX, EAX		0x1fd4
5B		POP     EBX		0x1fd6
C3		RETN		0x1fd7
--- new bb ---

C7 04 24 84 60 00 00		MOV     [ESP+1CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x1fe0
FF 15 EC 70 00 00		CALL    DS:__IMP__ENTERCRITICALSECTION@4; ENTERCRITICALSECTION(X)		0x1fe7
A1 7C 60 00 00		MOV     EAX, DS:_KEY_DTOR_LIST		0x1fed
83 EC 04		SUB     ESP, 4		0x1ff2
85 C0		TEST    CUR_KEY, CUR_KEY		0x1ff5
74 27		JZ      SHORT LOC_2020		0x1ff7
--- new bb ---

31 C9		XOR     ECX, ECX		0x1ff9
EB 0B		JMP     SHORT LOC_2008		0x1ffb
--- new bb ---

89 C1		MOV     ECX, PREV_KEY		0x2000
85 D2		TEST    CUR_KEY, CUR_KEY		0x2002
74 1A		JZ      SHORT LOC_2020		0x2004
--- new bb ---

89 D0		MOV     PREV_KEY, CUR_KEY		0x2006
--- new bb ---

8B 10		MOV     EDX, [CUR_KEY]		0x2008
39 DA		CMP     EDX, EBX		0x200a
8B 50 08		MOV     EDX, [CUR_KEY+8]		0x200c
75 EF		JNZ     SHORT LOC_2000		0x200f
--- new bb ---

85 C9		TEST    PREV_KEY, PREV_KEY		0x2011
74 2B		JZ      SHORT LOC_2040		0x2013
--- new bb ---

89 51 08		MOV     [PREV_KEY+8], EDX		0x2015
--- new bb ---

89 04 24		MOV     [ESP+1CH+LPCRITICALSECTION], CUR_KEY; BLOCK		0x2018
E8 2C 05 00 00		CALL    _FREE		0x201b
--- new bb ---

C7 04 24 84 60 00 00		MOV     [ESP+1CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x2020
FF 15 08 71 00 00		CALL    DS:__IMP__LEAVECRITICALSECTION@4; LEAVECRITICALSECTION(X)		0x2027
31 C0		XOR     EAX, EAX		0x202d
83 EC 04		SUB     ESP, 4		0x202f
83 C4 18		ADD     ESP, 18H		0x2032
5B		POP     EBX		0x2035
C3		RETN		0x2036
--- new bb ---

89 15 7C 60 00 00		MOV     DS:_KEY_DTOR_LIST, EDX		0x2040
EB D0		JMP     SHORT LOC_2018		0x2046

--- new func --- ___mingw_TLScallback
--- new bb ---

53		PUSH    EBX		0x2050
83 EC 18		SUB     ESP, 18H		0x2051
8B 44 24 24		MOV     EAX, [ESP+1CH+REASON]		0x2054
83 F8 02		CMP     EAX, 2		0x2058
0F 84 BF 00 00 00		JZ      LOC_2120		0x205b
--- new bb ---

77 25		JA      SHORT LOC_2088		0x2061
--- new bb ---

85 C0		TEST    EAX, EAX		0x2063
74 51		JZ      SHORT LOC_20B8		0x2065
--- new bb ---

A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x2067
85 C0		TEST    EAX, EAX		0x206c
74 30		JZ      SHORT LOC_20A0		0x206e
--- new bb ---

C7 05 80 60 00 00 01 00 00 00		MOV     DS:___MINGWTHR_CS_INIT, 1		0x2070
--- new bb ---

83 C4 18		ADD     ESP, 18H		0x207a
B8 01 00 00 00		MOV     EAX, 1		0x207d
5B		POP     EBX		0x2082
C3		RETN		0x2083
--- new bb ---

83 F8 03		CMP     EAX, 3		0x2088
75 ED		JNZ     SHORT LOC_207A		0x208b
--- new bb ---

A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x208d
85 C0		TEST    EAX, EAX		0x2092
74 E4		JZ      SHORT LOC_207A		0x2094
--- new bb ---

E8 35 FE FF FF		CALL    ___MINGWTHR_RUN_KEY_DTORS_PART_0		0x2096
EB DD		JMP     SHORT LOC_207A		0x209b
--- new bb ---

C7 04 24 84 60 00 00		MOV     [ESP+1CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x20a0
FF 15 04 71 00 00		CALL    DS:__IMP__INITIALIZECRITICALSECTION@4; INITIALIZECRITICALSECTION(X)		0x20a7
83 EC 04		SUB     ESP, 4		0x20ad
EB BE		JMP     SHORT LOC_2070		0x20b0
--- new bb ---

A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x20b8
85 C0		TEST    EAX, EAX		0x20bd
74 05		JZ      SHORT LOC_20C6		0x20bf
--- new bb ---

E8 0A FE FF FF		CALL    ___MINGWTHR_RUN_KEY_DTORS_PART_0		0x20c1
--- new bb ---

A1 80 60 00 00		MOV     EAX, DS:___MINGWTHR_CS_INIT		0x20c6
83 F8 01		CMP     EAX, 1		0x20cb
75 AA		JNZ     SHORT LOC_207A		0x20ce
--- new bb ---

8B 1D 7C 60 00 00		MOV     EBX, DS:_KEY_DTOR_LIST		0x20d0
85 DB		TEST    KEYP, KEYP		0x20d6
74 17		JZ      SHORT LOC_20F1		0x20d8
--- new bb ---

8D B6 00 00 00 00		LEA     ESI, [ESI+0]		0x20da
--- new bb ---

89 D8		MOV     EAX, KEYP		0x20e0
8B 5B 08		MOV     KEYP, [KEYP+8]		0x20e2
89 04 24		MOV     [ESP+1CH+LPCRITICALSECTION], KEYP; BLOCK		0x20e5
E8 5F 04 00 00		CALL    _FREE		0x20e8
85 DB		TEST    T, T		0x20ed
75 EF		JNZ     SHORT LOC_20E0		0x20ef
--- new bb ---

C7 05 7C 60 00 00 00 00 00 00		MOV     DS:_KEY_DTOR_LIST, 0		0x20f1
C7 05 80 60 00 00 00 00 00 00		MOV     DS:___MINGWTHR_CS_INIT, 0		0x20fb
C7 04 24 84 60 00 00		MOV     [ESP+1CH+LPCRITICALSECTION], OFFSET ___MINGWTHR_CS; LPCRITICALSECTION		0x2105
FF 15 E8 70 00 00		CALL    DS:__IMP__DELETECRITICALSECTION@4; DELETECRITICALSECTION(X)		0x210c
83 EC 04		SUB     ESP, 4		0x2112
E9 60 FF FF FF		JMP     LOC_207A		0x2115
--- new bb ---

E8 3B F7 FF FF		CALL    _FPRESET		0x2120
83 C4 18		ADD     ESP, 18H		0x2125
B8 01 00 00 00		MOV     EAX, 1		0x2128
5B		POP     EBX		0x212d
C3		RETN		0x212e

--- new func --- __ValidateImageBase.part.0
--- new bb ---

03 40 3C		ADD     PIMAGEBASE, [PIMAGEBASE+3CH]		0x2130
81 38 50 45 00 00		CMP     DWORD PTR [PNTHEADER], 4550H		0x2133
75 15		JNZ     SHORT LOC_2150		0x2139
--- new bb ---

66 81 78 18 0B 01		CMP     WORD PTR [PNTHEADER+18H], 10BH		0x213b
0F 94 C0		SETZ    AL		0x2141
0F B6 C0		MOVZX   EAX, AL		0x2144
C3		RETN		0x2147
--- new bb ---

31 C0		XOR     PNTHEADER, PNTHEADER		0x2150
C3		RETN		0x2152

--- new func --- __ValidateImageBase
--- new bb ---

8B 44 24 04		MOV     EAX, [ESP+PDOSHEADER]		0x2160
66 81 38 4D 5A		CMP     WORD PTR [EAX], 5A4DH		0x2164
75 05		JNZ     SHORT LOC_2170		0x2169
--- new bb ---

EB C3		JMP     SHORT __VALIDATEIMAGEBASE_PART_0		0x216b
--- new bb ---

31 C0		XOR     PDOSHEADER_0, PDOSHEADER_0		0x2170
C3		RETN		0x2172
--- new bb ---

03 40 3C		ADD     PIMAGEBASE, [PIMAGEBASE+3CH]		0x2130

--- new func --- __FindPESection
--- new bb ---

56		PUSH    ESI		0x2180
53		PUSH    EBX		0x2181
8B 54 24 0C		MOV     EDX, [ESP+8+PIMAGEBASE]		0x2182
8B 5C 24 10		MOV     EBX, [ESP+8+RVA]		0x2186
03 52 3C		ADD     EDX, [EDX+3CH]		0x218a
0F B7 42 14		MOVZX   EAX, WORD PTR [PNTHEADER+14H]		0x218d
0F B7 72 06		MOVZX   ESI, WORD PTR [PNTHEADER+6]		0x2191
8D 44 02 18		LEA     EAX, [PNTHEADER+EAX+18H]		0x2195
85 F6		TEST    ESI, ESI		0x2199
74 1B		JZ      SHORT LOC_21B8		0x219b
--- new bb ---

31 C9		XOR     ECX, ECX		0x219d
90		NOP		0x219f
--- new bb ---

8B 50 0C		MOV     EDX, [PSECTION+0CH]		0x21a0
39 DA		CMP     EDX, EBX		0x21a3
77 07		JA      SHORT LOC_21AE		0x21a5
--- new bb ---

03 50 08		ADD     EDX, [PSECTION+8]		0x21a7
39 DA		CMP     EDX, EBX		0x21aa
77 0C		JA      SHORT LOC_21BA		0x21ac
--- new bb ---

83 C1 01		ADD     ISECTION, 1		0x21ae
83 C0 28		ADD     PSECTION, 28H ; '('		0x21b1
39 F1		CMP     ISECTION, ESI		0x21b4
75 E8		JNZ     SHORT LOC_21A0		0x21b6
--- new bb ---

31 C0		XOR     PSECTION, PSECTION		0x21b8
--- new bb ---

5B		POP     RVA_0		0x21ba
5E		POP     ESI		0x21bb
C3		RETN		0x21bc

--- new func --- __FindPESectionByName
--- new bb ---

55		PUSH    EBP		0x21c0
57		PUSH    EDI		0x21c1
56		PUSH    ESI		0x21c2
53		PUSH    EBX		0x21c3
31 DB		XOR     EBX, EBX		0x21c4
83 EC 1C		SUB     ESP, 1CH		0x21c6
8B 7C 24 30		MOV     EDI, [ESP+2CH+PNAME]		0x21c9
89 3C 24		MOV     [ESP+2CH+STR], EDI; STR		0x21cd
E8 47 03 00 00		CALL    _STRLEN		0x21d0
83 F8 08		CMP     EAX, 8		0x21d5
77 60		JA      SHORT LOC_223A		0x21d8
--- new bb ---

66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x21da
75 55		JNZ     SHORT LOC_223A		0x21e3
--- new bb ---

B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x21e5
E8 41 FF FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x21ea
85 C0		TEST    EAX, EAX		0x21ef
74 47		JZ      SHORT LOC_223A		0x21f1
--- new bb ---

A1 3C 00 40 00		MOV     EAX, DS:40003CH		0x21f3
0F B7 90 14 00 40 00		MOVZX   EDX, WORD PTR [EAX+400014H]		0x21f8
0F B7 A8 06 00 40 00		MOVZX   EBP, WORD PTR [EAX+400006H]		0x21ff
8D 9C 10 18 00 40 00		LEA     EBX, [EAX+EDX+400018H]		0x2206
85 ED		TEST    EBP, EBP		0x220d
74 37		JZ      SHORT LOC_2248		0x220f
--- new bb ---

31 F6		XOR     ESI, ESI		0x2211
EB 0D		JMP     SHORT LOC_2222		0x2213
--- new bb ---

83 C6 01		ADD     ISECTION, 1		0x2218
83 C3 28		ADD     PSECTION, 28H ; '('		0x221b
39 EE		CMP     ISECTION, EBP		0x221e
74 26		JZ      SHORT LOC_2248		0x2220
--- new bb ---

C7 44 24 08 08 00 00 00		MOV     [ESP+2CH+MAXCOUNT], 8; MAXCOUNT		0x2222
89 7C 24 04		MOV     [ESP+2CH+STR2], EDI; STR2		0x222a
89 1C 24		MOV     [ESP+2CH+STR], PSECTION; STR1		0x222e
E8 DE 02 00 00		CALL    _STRNCMP		0x2231
85 C0		TEST    EAX, EAX		0x2236
75 DE		JNZ     SHORT LOC_2218		0x2238
--- new bb ---

83 C4 1C		ADD     ESP, 1CH		0x223a
89 D8		MOV     EAX, EBX		0x223d
5B		POP     EBX		0x223f
5E		POP     ESI		0x2240
5F		POP     EDI		0x2241
5D		POP     EBP		0x2242
C3		RETN		0x2243
--- new bb ---

83 C4 1C		ADD     ESP, 1CH		0x2248
31 DB		XOR     PSECTION, PSECTION		0x224b
89 D8		MOV     EAX, EBX		0x224d
5B		POP     EBX		0x224f
5E		POP     ESI		0x2250
5F		POP     EDI		0x2251
5D		POP     EBP		0x2252
C3		RETN		0x2253

--- new func --- ___mingw_GetSectionForAddress
--- new bb ---

31 D2		XOR     EDX, EDX		0x2260
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x2262
75 63		JNZ     SHORT LOC_22D0		0x226b
--- new bb ---

56		PUSH    ESI		0x226d
B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x226e
53		PUSH    EBX		0x2273
E8 B7 FE FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x2274
85 C0		TEST    EAX, EAX		0x2279
74 4D		JZ      SHORT LOC_22CA		0x227b
--- new bb ---

A1 3C 00 40 00		MOV     EAX, DS:40003CH		0x227d
8B 5C 24 0C		MOV     EBX, [ESP+8+P]		0x2282
0F B7 90 14 00 40 00		MOVZX   EDX, WORD PTR [EAX+400014H]		0x2286
0F B7 B0 06 00 40 00		MOVZX   ESI, WORD PTR [EAX+400006H]		0x228d
81 EB 00 00 40 00		SUB     EBX, 400000H		0x2294
8D 94 10 18 00 40 00		LEA     EDX, [EAX+EDX+400018H]		0x229a
85 F6		TEST    ESI, ESI		0x22a1
74 23		JZ      SHORT LOC_22C8		0x22a3
--- new bb ---

31 C9		XOR     ECX, ECX		0x22a5
8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x22a7
66 90		XCHG    AX, AX		0x22ae
--- new bb ---

8B 42 0C		MOV     EAX, [EDX+0CH]		0x22b0
39 C3		CMP     RVA, EAX		0x22b3
72 07		JB      SHORT LOC_22BE		0x22b5
--- new bb ---

03 42 08		ADD     EAX, [EDX+8]		0x22b7
39 C3		CMP     RVA, EAX		0x22ba
72 0C		JB      SHORT LOC_22CA		0x22bc
--- new bb ---

83 C1 01		ADD     ECX, 1		0x22be
83 C2 28		ADD     EDX, 28H ; '('		0x22c1
39 F1		CMP     ECX, ESI		0x22c4
75 E8		JNZ     SHORT LOC_22B0		0x22c6
--- new bb ---

31 D2		XOR     EDX, EDX		0x22c8
--- new bb ---

89 D0		MOV     EAX, EDX		0x22ca
5B		POP     EBX		0x22cc
5E		POP     ESI		0x22cd
C3		RETN		0x22ce
--- new bb ---

89 D0		MOV     EAX, EDX		0x22d0
C3		RETN		0x22d2

--- new func --- ___mingw_GetSectionCount
--- new bb ---

31 C0		XOR     EAX, EAX		0x22e0
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x22e2
75 1A		JNZ     SHORT LOCRET_2307		0x22eb
--- new bb ---

B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x22ed
E8 39 FE FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x22f2
85 C0		TEST    EAX, EAX		0x22f7
74 0C		JZ      SHORT LOCRET_2307		0x22f9
--- new bb ---

A1 3C 00 40 00		MOV     EAX, DS:40003CH		0x22fb
0F B7 80 06 00 40 00		MOVZX   EAX, WORD PTR [EAX+400006H]		0x2300
--- new bb ---

C3		RETN		0x2307

--- new func --- __FindPESectionExec
--- new bb ---

31 D2		XOR     EDX, EDX		0x2310
53		PUSH    EBX		0x2312
8B 4C 24 08		MOV     ECX, [ESP+4+ENO]		0x2313
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x2317
75 47		JNZ     SHORT LOC_2369		0x2320
--- new bb ---

B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x2322
E8 04 FE FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x2327
85 C0		TEST    EAX, EAX		0x232c
74 39		JZ      SHORT LOC_2369		0x232e
--- new bb ---

A1 3C 00 40 00		MOV     EAX, DS:40003CH		0x2330
0F B7 90 14 00 40 00		MOVZX   EDX, WORD PTR [EAX+400014H]		0x2335
0F B7 98 06 00 40 00		MOVZX   EBX, WORD PTR [EAX+400006H]		0x233c
8D 94 10 18 00 40 00		LEA     EDX, [EAX+EDX+400018H]		0x2343
85 DB		TEST    EBX, EBX		0x234a
74 19		JZ      SHORT LOC_2367		0x234c
--- new bb ---

31 C0		XOR     EAX, EAX		0x234e
--- new bb ---

F6 42 27 20		TEST    BYTE PTR [PSECTION+27H], 20H		0x2350
74 07		JZ      SHORT LOC_235D		0x2354
--- new bb ---

85 C9		TEST    ENO_0, ENO_0		0x2356
74 0F		JZ      SHORT LOC_2369		0x2358
--- new bb ---

83 E9 01		SUB     ENO_0, 1		0x235a
--- new bb ---

83 C0 01		ADD     ISECTION, 1		0x235d
83 C2 28		ADD     PSECTION, 28H ; '('		0x2360
39 D8		CMP     ISECTION, EBX		0x2363
75 E9		JNZ     SHORT LOC_2350		0x2365
--- new bb ---

31 D2		XOR     PSECTION, PSECTION		0x2367
--- new bb ---

89 D0		MOV     EAX, EDX		0x2369
5B		POP     EBX		0x236b
C3		RETN		0x236c

--- new func --- __GetPEImageBase
--- new bb ---

31 D2		XOR     EDX, EDX		0x2370
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x2372
75 14		JNZ     SHORT LOC_2391		0x237b
--- new bb ---

B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x237d
E8 A9 FD FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x2382
85 C0		TEST    EAX, EAX		0x2387
B8 00 00 40 00		MOV     EAX, 400000H		0x2389
0F 45 D0		CMOVNZ  EDX, EAX		0x238e
--- new bb ---

89 D0		MOV     EAX, EDX		0x2391
C3		RETN		0x2393

--- new func --- __IsNonwritableInCurrentImage
--- new bb ---

31 C0		XOR     EAX, EAX		0x23a0
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x23a2
75 63		JNZ     SHORT LOCRET_2410		0x23ab
--- new bb ---

56		PUSH    ESI		0x23ad
B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x23ae
53		PUSH    EBX		0x23b3
E8 77 FD FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x23b4
85 C0		TEST    EAX, EAX		0x23b9
74 4D		JZ      SHORT LOC_240A		0x23bb
--- new bb ---

8B 15 3C 00 40 00		MOV     EDX, DS:40003CH		0x23bd
8B 5C 24 0C		MOV     EBX, [ESP+8+PTARGET]		0x23c3
0F B7 82 14 00 40 00		MOVZX   EAX, WORD PTR [EDX+400014H]		0x23c7
0F B7 B2 06 00 40 00		MOVZX   ESI, WORD PTR [EDX+400006H]		0x23ce
81 EB 00 00 40 00		SUB     EBX, 400000H		0x23d5
8D 84 02 18 00 40 00		LEA     EAX, [EDX+EAX+400018H]		0x23db
85 F6		TEST    ESI, ESI		0x23e2
74 22		JZ      SHORT LOC_2408		0x23e4
--- new bb ---

31 C9		XOR     ECX, ECX		0x23e6
8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x23e8
90		NOP		0x23ef
--- new bb ---

8B 50 0C		MOV     EDX, [EAX+0CH]		0x23f0
39 D3		CMP     RVATARGET, EDX		0x23f3
72 07		JB      SHORT LOC_23FE		0x23f5
--- new bb ---

03 50 08		ADD     EDX, [EAX+8]		0x23f7
39 D3		CMP     RVATARGET, EDX		0x23fa
72 1A		JB      SHORT LOC_2418		0x23fc
--- new bb ---

83 C1 01		ADD     ECX, 1		0x23fe
83 C0 28		ADD     EAX, 28H ; '('		0x2401
39 F1		CMP     ECX, ESI		0x2404
75 E8		JNZ     SHORT LOC_23F0		0x2406
--- new bb ---

31 C0		XOR     EAX, EAX		0x2408
--- new bb ---

5B		POP     EBX		0x240a
5E		POP     ESI		0x240b
C3		RETN		0x240c
--- new bb ---

C3		RETN		0x2410
--- new bb ---

8B 40 24		MOV     PSECTION, [PSECTION+24H]		0x2418
5B		POP     RVATARGET		0x241b
5E		POP     ESI		0x241c
F7 D0		NOT     EAX		0x241d
C1 E8 1F		SHR     EAX, 1FH		0x241f
C3		RETN		0x2422

--- new func --- ___mingw_enum_import_library_names
--- new bb ---

31 C9		XOR     ECX, ECX		0x2430
57		PUSH    EDI		0x2432
66 81 3D 00 00 40 00 4D 5A		CMP     WORD PTR DS:400000H, 5A4DH		0x2433
56		PUSH    ESI		0x243c
53		PUSH    EBX		0x243d
8B 5C 24 10		MOV     EBX, [ESP+0CH+I]		0x243e
75 56		JNZ     SHORT LOC_249A		0x2442
--- new bb ---

B8 00 00 40 00		MOV     EAX, 400000H; PIMAGEBASE		0x2444
E8 E2 FC FF FF		CALL    __VALIDATEIMAGEBASE_PART_0		0x2449
85 C0		TEST    EAX, EAX		0x244e
74 48		JZ      SHORT LOC_249A		0x2450
--- new bb ---

A1 3C 00 40 00		MOV     EAX, DS:40003CH		0x2452
8D B0 00 00 40 00		LEA     ESI, [EAX+400000H]		0x2457
8B 80 80 00 40 00		MOV     EAX, [EAX+400080H]		0x245d
85 C0		TEST    IMPORTSSTARTRVA, IMPORTSSTARTRVA		0x2463
74 33		JZ      SHORT LOC_249A		0x2465
--- new bb ---

0F B7 56 14		MOVZX   EDX, WORD PTR [PNTHEADER+14H]		0x2467
0F B7 7E 06		MOVZX   EDI, WORD PTR [PNTHEADER+6]		0x246b
8D 54 16 18		LEA     EDX, [PNTHEADER+EDX+18H]		0x246f
85 FF		TEST    EDI, EDI		0x2473
74 23		JZ      SHORT LOC_249A		0x2475
--- new bb ---

31 F6		XOR     PNTHEADER, PNTHEADER		0x2477
8D B4 26 00 00 00 00		LEA     ESI, [ESI+0]		0x2479
--- new bb ---

8B 4A 0C		MOV     ECX, [EDX+0CH]		0x2480
39 C8		CMP     IMPORTSSTARTRVA, ECX		0x2483
72 07		JB      SHORT LOC_248E		0x2485
--- new bb ---

03 4A 08		ADD     ECX, [EDX+8]		0x2487
39 C8		CMP     IMPORTSSTARTRVA, ECX		0x248a
72 12		JB      SHORT LOC_24A0		0x248c
--- new bb ---

83 C6 01		ADD     ESI, 1		0x248e
83 C2 28		ADD     EDX, 28H ; '('		0x2491
39 FE		CMP     ESI, EDI		0x2494
75 E8		JNZ     SHORT LOC_2480		0x2496
--- new bb ---

31 C9		XOR     ECX, ECX		0x2498
--- new bb ---

5B		POP     EBX		0x249a
89 C8		MOV     EAX, ECX		0x249b
5E		POP     ESI		0x249d
5F		POP     EDI		0x249e
C3		RETN		0x249f
--- new bb ---

05 00 00 40 00		ADD     IMPORTSSTARTRVA, 400000H		0x24a0
EB 0F		JMP     SHORT LOC_24B6		0x24a5
--- new bb ---

83 EB 01		SUB     I_0, 1		0x24b0
83 C0 14		ADD     IMPORTDESC, 14H		0x24b3
--- new bb ---

8B 48 04		MOV     ECX, [IMPORTDESC+4]		0x24b6
85 C9		TEST    ECX, ECX		0x24b9
75 07		JNZ     SHORT LOC_24C4		0x24bb
--- new bb ---

8B 50 0C		MOV     EDX, [IMPORTDESC+0CH]		0x24bd
85 D2		TEST    EDX, EDX		0x24c0
74 D4		JZ      SHORT LOC_2498		0x24c2
--- new bb ---

85 DB		TEST    I_0, I_0		0x24c4
7F E8		JG      SHORT LOC_24B0		0x24c6
--- new bb ---

8B 48 0C		MOV     ECX, [IMPORTDESC+0CH]		0x24c8
5B		POP     I_0		0x24cb
5E		POP     ESI		0x24cc
5F		POP     EDI		0x24cd
81 C1 00 00 40 00		ADD     ECX, 400000H		0x24ce
89 C8		MOV     IMPORTDESC, ECX		0x24d4
C3		RETN		0x24d6

--- new func --- ___chkstk_ms
--- new bb ---

51		PUSH    ECX		0x24e0
50		PUSH    EAX		0x24e1
3D 00 10 00 00		CMP     EAX, 1000H		0x24e2
8D 4C 24 0C		LEA     ECX, [ESP+8+ARG_0]		0x24e7
72 15		JB      SHORT LOC_2502		0x24eb
--- new bb ---

81 E9 00 10 00 00		SUB     ECX, 1000H		0x24ed
83 09 00		OR      DWORD PTR [ECX], 0		0x24f3
2D 00 10 00 00		SUB     EAX, 1000H		0x24f6
3D 00 10 00 00		CMP     EAX, 1000H		0x24fb
77 EB		JA      SHORT LOC_24ED		0x2500
--- new bb ---

29 C1		SUB     ECX, EAX		0x2502
83 09 00		OR      DWORD PTR [ECX], 0		0x2504
58		POP     EAX		0x2507
59		POP     ECX		0x2508
C3		RETN		0x2509

--- new func --- _vfprintf
--- new bb ---

FF 25 8C 71 00 00		JMP     DS:__IMP__VFPRINTF		0x250c

--- new func --- _strncmp
--- new bb ---

FF 25 88 71 00 00		JMP     DS:__IMP__STRNCMP		0x2514

--- new func --- _strlen
--- new bb ---

FF 25 84 71 00 00		JMP     DS:__IMP__STRLEN		0x251c

--- new func --- _signal
--- new bb ---

FF 25 80 71 00 00		JMP     DS:__IMP__SIGNAL		0x2524

--- new func --- _puts
--- new bb ---

FF 25 7C 71 00 00		JMP     DS:__IMP__PUTS		0x252c

--- new func --- _memcpy
--- new bb ---

FF 25 78 71 00 00		JMP     DS:__IMP__MEMCPY		0x2534

--- new func --- _malloc
--- new bb ---

FF 25 74 71 00 00		JMP     DS:__IMP__MALLOC		0x253c

--- new func --- _fwrite
--- new bb ---

FF 25 70 71 00 00		JMP     DS:__IMP__FWRITE		0x2544

--- new func --- _free
--- new bb ---

FF 25 6C 71 00 00		JMP     DS:__IMP__FREE		0x254c

--- new func --- _fprintf
--- new bb ---

FF 25 68 71 00 00		JMP     DS:__IMP__FPRINTF		0x2554

--- new func --- _exit
--- new bb ---

FF 25 64 71 00 00		JMP     DS:__IMP__EXIT		0x255c

--- new func --- _calloc
--- new bb ---

FF 25 60 71 00 00		JMP     DS:__IMP__CALLOC		0x2564

--- new func --- _abort
--- new bb ---

FF 25 5C 71 00 00		JMP     DS:__IMP__ABORT		0x256c

--- new func --- __onexit
--- new bb ---

FF 25 58 71 00 00		JMP     DS:__IMP___ONEXIT		0x2574

--- new func --- __initterm
--- new bb ---

FF 25 50 71 00 00		JMP     DS:__IMP___INITTERM		0x257c

--- new func --- __cexit
--- new bb ---

FF 25 4C 71 00 00		JMP     DS:__IMP___CEXIT		0x2584

--- new func --- __amsg_exit
--- new bb ---

FF 25 48 71 00 00		JMP     DS:__IMP___AMSG_EXIT		0x258c

--- new func --- ___setusermatherr
--- new bb ---

FF 25 44 71 00 00		JMP     DS:__IMP____SETUSERMATHERR		0x2594

--- new func --- ___set_app_type
--- new bb ---

FF 25 40 71 00 00		JMP     DS:__IMP____SET_APP_TYPE		0x259c

--- new func --- ___p__fmode
--- new bb ---

FF 25 3C 71 00 00		JMP     DS:__IMP____P__FMODE		0x25a4

--- new func --- ___p__commode
--- new bb ---

FF 25 38 71 00 00		JMP     DS:__IMP____P__COMMODE		0x25ac

--- new func --- ___p__acmdln
--- new bb ---

FF 25 34 71 00 00		JMP     DS:__IMP____P__ACMDLN		0x25b4

--- new func --- ___getmainargs
--- new bb ---

FF 25 28 71 00 00		JMP     DS:__IMP____GETMAINARGS		0x25bc

--- new func --- ___acrt_iob_func
--- new bb ---

8B 44 24 04		MOV     EAX, [ESP+INDEX]		0x25d0
C1 E0 05		SHL     EAX, 5		0x25d4
03 05 54 71 00 00		ADD     EAX, DS:__IMP___IOB		0x25d7
C3		RETN		0x25dd

--- new func --- __get_invalid_parameter_handler
--- new bb ---

A1 B0 60 00 00		MOV     EAX, DS:_BSS_0		0x25e0
C3		RETN		0x25e5

--- new func --- __set_invalid_parameter_handler
--- new bb ---

8B 44 24 04		MOV     EAX, [ESP+NEW_HANDLER]		0x25f0
87 05 B0 60 00 00		XCHG    EAX, DS:_BSS_0		0x25f4
C3		RETN		0x25fa

--- new func --- _register_frame_ctor
--- new bb ---

E9 EB EE FF FF		JMP     ___GCC_REGISTER_FRAME		0x2600
--- new bb ---

55		PUSH    EBP		0x14f0
